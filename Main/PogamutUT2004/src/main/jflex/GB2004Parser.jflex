

// generated by yylex.xsl from PogamutUT2004\src\gb2004\messages\FlexGenerator.xslt, called from ant script build.xml
// file was further processed by JFlex to create class Yylex (yylex.java)

package cz.cuni.amis.pogamut.ut2004.communication.messages.gbinfomessages;

import java.io.Reader;

// imports from MessageObjectsList.xml/gbmessages/settings/jflexsettings/javaimport
import java.util.*;
import javax.vecmath.*;
import cz.cuni.amis.pogamut.base.communication.translator.*;
import cz.cuni.amis.pogamut.base.communication.translator.event.*;
import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;
import cz.cuni.amis.pogamut.base.communication.parser.*;
import cz.cuni.amis.pogamut.base.communication.parser.exception.*;
import cz.cuni.amis.pogamut.base.communication.parser.impl.yylex.*;
import cz.cuni.amis.pogamut.base.communication.messages.*;
import cz.cuni.amis.pogamut.base.communication.worldview.*;
import cz.cuni.amis.pogamut.base.communication.worldview.event.*;
import cz.cuni.amis.pogamut.base.communication.worldview.object.*;
import cz.cuni.amis.pogamut.base3d.worldview.object.*;
import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;
import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;
import cz.cuni.amis.pogamut.ut2004.communication.parser.*;
import cz.cuni.amis.pogamut.ut2004.communication.messages.*;
import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;
import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;
import cz.cuni.amis.pogamut.ut2004.utils.UnrealUtils;
import java.lang.reflect.Method;
import cz.cuni.amis.utils.exception.*;
import cz.cuni.amis.pogamut.multi.agent.*;



// beggining of the yylex definition
%%

// declare result class Yylex as public
%public

// return type of the yylex() method should be Object
%type InfoMessage

%implements IUT2004Yylex

// default return value should be null
%eofval{
throw new ParserEOFException(this);
%eofval}

// following block is containing code that will be added to the generated lexical parser yylex.java
%{
	
 	public static final String DELIMITERS_STANDARD = " {}";
 	public static final String DELIMITERS_EXTENDED = " {},";

	/** Map for list of String, Double */
	protected Map<Integer, Double> mapIntIDDouble = null;

	/** Map for list of String, Double */
	protected Map<Integer, Double> mapIntDouble = null;
	
	/** parser reference, this parser will be used for translation of UnrealID to IntID */
	protected UnrealIdTranslator translator = null;
	
	/** object that is used to translate messages into objects */ 
	protected ItemTranslator itemTranslator = null;
	
	/** observer for the yylex for reporting exceptions */	
	protected IYylexObserver observer = null;
	
	/** object that is used to translate strings into item types */
	protected ItemTypeTranslator itemTypeTranslator;
	
	/** time in the UT2004 */	
	protected double ut2004Time = 0;
	
	public Yylex(){
	}
	
	public void setReader(Reader reader) {
		yyreset(reader);
	}
	
	public void close() throws java.io.IOException {
		yyclose();
	}
	
	public void setItemTranslator(ItemTranslator translator) {
		this.itemTranslator = translator;
	}
	
	@Override
	public void setItemTypeTranslator(ItemTypeTranslator translator) {
		this.itemTypeTranslator = translator;
	}
	
	public void setObserver(IYylexObserver observer) {
		this.observer = observer;
	}
	
	/**
	 * Set parser translating UnrealID to IntID.
	 * This function should be called after constructor, I dont know how to define constructor, so this will do.
	 */
	public void setTranslator(UnrealIdTranslator translator) {
		this.translator = translator;
	}
	
	public void setTime(IWorldObjectUpdatedEvent obj, double time) {
       //we have to multiply by 1000 to convert from floats to longs, larger number is not required because of the way GB2004 work
       setPropertyByReflection( obj, "SimTime", long.class, (long)(ut2004Time*1000) );
	}
	
	public void setTime(IWorldEvent obj, double time) {
	   //we have to multiply by 1000 to convert from floats to longs, larger number is not required because of the way GB2004 work
	   setPropertyByReflection( obj, "SimTime", long.class, (long)(ut2004Time*1000) );
	}
	
	/** Set property of an object by reflection
	 * 
	 * Setter method name is expected to follow name convention "set<PropertyName>", where the first letter of property name is upper case.
	 * Potential access restriction of the setter method is overriden via reflection.
	 * 
	 * @param object the object
	 * @param propertyName property name
	 * @param valueType property value / setter argument type
	 * @param value value to set
	 */
	protected <T> void setPropertyByReflection( Object object, String propertyName, Class<T> valueType, T value ) {
	    try {
            Method m = null;
            // we have to look for definition in each ancestor starting with the class itself
            Class<?> ancestorClass = object.getClass();
            Class<?>[] argumentTypes = new Class[]{valueType};
            String setterName = "set"+propertyName.substring( 0, 1 ).toUpperCase()+propertyName.substring( 1 );
            while ( m == null ) {
	            try {
	                m = ancestorClass.getDeclaredMethod( setterName, argumentTypes );
	            } catch ( NoSuchMethodException e ) {
	                ancestorClass = ancestorClass.getSuperclass();
	                if ( ancestorClass == null ) {
	                    throw e;
	                }
	            }
	        }
            m.setAccessible( true );
            m.invoke( object, value );
        } catch (Exception e) {
            exceptionOccured(e, "Can't set "+propertyName+" to message " + object.getClass() );
        }
	}
	
	/**
	 * Logs the exception if observer present, or print it to System.out.
	 * <BR><BR>
	 * Does not throw the exception...
	 * <BR><BR>
	 * If exception 'e' is null, only info message is written to logs.
	 * @param e
	 * @param info	 
	 */
	protected void exceptionOccured(Exception e, String info) {
		IYylexObserver currentObserver = this.observer;
		if (currentObserver != null) {			
			currentObserver.exception(e, info != null ? info : "--empty info--");
		} else {
			System.out.println("Yylex exception: " + info);
			if (e != null) e.printStackTrace(); 
		}
	}
	
	/**
	 * Send the warning to observer or prints it to the console.
	 */
	protected void warning(String info) {
		IYylexObserver currentObserver = this.observer;
		if (currentObserver != null) {			
			currentObserver.warning(info != null ? info : "--empty warning--");
		} else {
			System.out.println("Yylex warning: " + info);			 
		}
	}
	
	/**
     * This method should be overriden to parse additional messages, that are not part of PogamutUDK Core.
     * This method is called whenever the parser meets a message name it does not recognize. If the message is 
     * recognized by overriding class, it should return new instance of a message the name represents. Otherwise it should return null.
     * The newly created message is then accesible for parameter setting via {@link #getParsedObject() }.
     * For further discussion on how this is done see <a href="http://pogamut.cuni.cz/pogamut-devel/doku.php?id=guidelines:adding_gamebots_message_to_pogamut_java">wiki article</a>.
     * @param messageName
     * @see #tryParsingUnprocessedMessageParameter(java.lang.String, java.lang.String) 
     * @return New message or null if not recognized
     */                       
    protected InfoMessage tryParsingUnprocessedMessage(String messageName){
        return null;
    }
        
    /**
     * This method should be overridden to parse parameters of additional messages that are not part of PogamuUDK Core.
     * Once the message was recognized by {@link #tryParsingUnprocessedMessage(java.lang.String) } this method
     * is called for every parameter.
     * @param paramName The name of the parameter as appeared in the Gamebots message
     * @param wholeParamText Whole text of the parameter part of message (contains the param name) - this string can be directly passed to 
     * xxxValue methods of this class to obtain translated values for basically all usable datatypes. If this is not enough, use {@link #getToken(java.lang.String, int) } 
     * to extract desired part of the message text (the value has index 1)
     * @see #tryParsingUnprocessedMessage(java.lang.String) 
     * @return 
     */        
    protected boolean tryParsingUnprocessedMessageParameter(String paramName, String wholeParamText){
        return false;
    }
        
	/**
	 * Returns 'num'-th token from 'text' using 'delimiters'.
	 * <BR><BR>
	 * Use only IFF you're getting only one token from 'text'.
	 * @param text
	 * @param delimiters
	 * @return String token
	 */ 
	protected String getToken(String text, String delimiters, int num) {
		StringTokenizer st = new StringTokenizer(text, delimiters);
		while (num-- > 0 && st.hasMoreTokens()) {
			st.nextToken();
		}
		try {
			return st.nextToken();
		} catch (Exception e) {
			exceptionOccured(e, "Can't get " + num + "-th token from text '"+text+"' using delimiters '"+delimiters+"'.");
			return null;
		}
	}
	
	/**
	 * Returns 'num'-th token from 'text' using DELIMITERS_STANDARD.
	 * <BR><BR>
	 * Use only IFF you're getting only one token from 'text'.
	 * @param text
	 * @return String token
	 */ 
	protected String getToken(String text, int num) {
		return getToken(text, DELIMITERS_STANDARD, num);		
	}

	/**
	 * Return an integer from num token in txt.
	 * <BR><BR>
	 * Integer token is expected to be 'second token' in the 'txt' using delimiters " {}".
	 * 
	 * @param  txt  text of parameter
	 * @return Integer from given token.
	 */
	protected int intValue( String txt  ) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.iNT_NONE;
		try {
        	return Integer.parseInt(getToken(txt, 1));
        } catch (NullPointerException e) {
        	warning("Can't get int token from text '"+txt+"'.");
        	return -1;
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong int number format in '"+txt+".");
        	return -1; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get int token from text '"+txt+"'.");
        	return -1;
        }
	}
	
	/**
	 * Return a long from num token in txt.
	 * <BR><BR>
	 * Long token is expected to be 'second token' in the 'txt' using delimiters " {}".
	 * 
	 * @param  txt  text of parameter
	 * @return Integer from given token.
	 */
	protected long longValue( String txt  ) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.lONG_NONE;
		try {
        	return Long.parseLong(getToken(txt, 1));
        } catch (NullPointerException e) {
        	warning("Can't get long token from text '"+txt+"'.");
        	return -1;
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong long number format in '"+txt+".");
        	return -1; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get long token from text '"+txt+"'.");
        	return -1;
        }
	}
	
	/**
	 * Return an integer from num token in txt.
	 * <BR><BR>
	 * Integer token is expected to be 'second token' in the 'txt' using delimiters " {}".
	 * 
	 * @param  txt  text of parameter
	 * @return Integer from given token.
	 */
	protected Integer integerValue( String txt  ) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.INT_NONE;
		try {
        	return Integer.parseInt(getToken(txt, 1));
        } catch (NullPointerException e) {
        	warning("Can't get int token from text '"+txt+"'.");
        	return null;
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong int number format in '"+txt+".");
        	return null; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get int token from text '"+txt+"'.");
        	return null;
        }
	}

	
	/**
	 * Return a double from num token in txt.
	 * <BR><BR>
	 * Num token is expected to be 'second token' in the 'txt' using delimiters " {}".	 
	 * 
	 * @param  txt  text of parameter
	 * @return Double from given token.
	 */
	protected double doubleValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.dOUBLE_NONE;
		try {
        	return Double.parseDouble(getToken(txt, 1));
        } catch (NullPointerException e) {
        	warning("Can't get double token from text '"+txt+"'.");
        	return -1;
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong double number format in '"+txt+".");
        	return -1; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get double token from text '"+txt+"'.");
        	return -1;
        }
	}
	
	/**
	 * Return a float from num token in txt.
	 * <BR><BR>
	 * Num token is expected to be 'second token' in the 'txt' using delimiters " {}".	 
	 * 
	 * @param  txt  text of parameter
	 * @return Float from given token.
	 */
	protected float floatValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.fLOAT_NONE;
		try {
        	return Float.parseFloat(getToken(txt, 1));
        } catch (NullPointerException e) {
        	warning("Can't get float token from text '"+txt+"'.");
        	return -1;
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong float number format in '"+txt+".");
        	return -1; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get float token from text '"+txt+"'.");
        	return -1;
        }
	}
	
    /**
	 * Return a triple (double[]{x,y,z})
	 * starting from num token(tokens are separated by space) in 'txt'
	 * 
	 * @param  txt  text of parameter
	 * @return Array of three doubles from given token.
	 */
	protected double[] getTriple( String txt ) {
		StringTokenizer st = new StringTokenizer(txt, DELIMITERS_EXTENDED);
		
		int num = 1;
		while (num-- > 0 && st.hasMoreTokens()) {
			st.nextToken();
		}
		
		// now we should have an token with integer
		try {
			double t1,t2,t3;
			t1 = new Double(st.nextToken()).doubleValue();
			t2 = new Double(st.nextToken()).doubleValue();
			t3 = new Double(st.nextToken()).doubleValue();
        	return new double[]{t1,t2,t3};
        } catch (NumberFormatException e) {
        	exceptionOccured(e, "Wrong double number format in '"+txt+".");
        	return null; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get triple from text '"+txt+"'.");
        	return null;
        }
	}
	
	/**
	 * Return a Location instance starting from num token(tokens are separated by space) in txt
	 * 
	 * @param  txt  text of parameter
	 * @return Location from given token.
	 */
	protected Location locationValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return Location.NONE;		
		double[] triple = getTriple(txt);
		try {
			return new Location(triple[0], triple[1], triple[2]);
		} catch (NullPointerException e) {
			warning("Can't get Location from text '"+txt+"'.");
			return Location.ZERO;
		} catch (Exception e) {
			exceptionOccured(e, "Can't get Location from text '"+txt+"'.");
			return null;
		}
	}
	
	/**
     * Return an ItemType instance.
     * 
     * @param  txt  text of parameter
     * @return ItemType from given token.
     */
    protected ItemType itemTypeValue(String txt) {
        return itemTypeTranslator.get(getToken(txt, 1));
    }
    
    protected ItemDescriptor itemDescriptorValue(ItemType type) {
    	return itemTranslator.getDescriptor(type);
    }
    
    /**
     * Return a Category of the item.
     * @param  txt  text of parameter
     * @return ItemType.Category from given token.
     */ 
    protected ItemType.Category categoryValue(String txt) {
    	if (txt == null || txt.toLowerCase().equals("none")) return ItemType.Category.NONE;
    	try {
    		return ItemType.Category.valueOf(getToken(txt, 1).toUpperCase());
    	} catch (IllegalArgumentException e) {
    		return ItemType.Category.OTHER;
    	}
    }
	
	/**
	 * Return a Velocity instance starting from num token(tokens are separated by space) in txt
	 * 
	 * @param  txt  text of parameter
	 * @return Velocity from given token.
	 */
	protected Velocity velocityValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return Velocity.NONE;
		double[] triple = getTriple(txt);
		try {
			return new Velocity(triple[0], triple[1], triple[2]);
		} catch (NullPointerException e) {
			warning("Can't get Velocity from text '"+txt+"'.");
			return Velocity.ZERO;
		} catch (Exception e) {
			exceptionOccured(e, "Can't get Velocity from text '"+txt+"'.");
			return null;
		}
	}

	/**
	 * Return a Rotation instance starting from num token(tokens are separated by space) in txt
	 * 
	 * @param  txt  text of parameter
	 * @return Rotation from given token.
	 */
	protected Rotation rotationValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return Rotation.NONE;
		double[] triple = getTriple(txt);
		try {
			return new Rotation(triple[0], triple[1], triple[2]);
		} catch (NullPointerException e) {
			warning("Can't get Rotation from text '"+txt+"'.");
			return Rotation.ZERO;
		} catch (Exception e) {
			exceptionOccured(e, "Can't get Rotation from text '"+txt+"'.");
			return null;
		}
	}
	
	/**
	 * Return a Point3d instance starting from num token(tokens are separated by space) in txt
	 * 
	 * @param  txt  text of parameter
	 * @return Point3d from given token.
	 */
	protected Point3d point3dValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.POINT3D_NONE;
		double[] triple = getTriple(txt);
		try {
			return new Point3d(triple[0], triple[1], triple[2]);
		} catch (NullPointerException e) {
			warning("Can't get Point3d from text '"+txt+"'.");
        	return new Point3d(0,0,0);
		} catch (Exception e) {
        	exceptionOccured(e, "Can't get Point3d from text '"+txt+"'.");
        	return null;
        }
	}
	
	/**
	 * Return a Vector3d instance starting from num token(tokens are separated by space) in txt
	 * 
	 * @param  txt  text of parameter
	 * @return Vector3d from given token.
	 */
	protected Vector3d vector3dValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealUtils.VECTOR3D_NONE;
		double[] triple = getTriple(txt);
		try {
			return new Vector3d(triple[0], triple[1], triple[2]);
		} catch (NullPointerException e) {
			warning("Can't get Vector3d from text '"+txt+"'.");
        	return new Vector3d(0,0,0);
		} catch (Exception e) {
        	exceptionOccured(e, "Can't get Vector3d from text '"+txt+"'.");
        	return null;
        }
	}
	
	/**
	 * Returns string for parsed token.
	 *	 
	 * @param  txt  text of parameter
	 * @return String from given token.
	 */
	protected String stringValue( String txt ) {	
		try {
        	int index = txt.indexOf(" ");
			if (index == -1) {
				warning("Can't get string token from text '" + txt + "'.");
				return "";
			}
			String string = txt.substring(index+1, txt.length()-1);
        	if (string != null) {
				return string;        	        		
        	} else {
        		warning("Can't get string token from text '"+txt+"'.");
        		return "";
        	}
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get string token from text '"+txt+"'.");
        	return "";
        }
	}
	
	/**
	 * Returns UnrealId for parsed token.
	 *	 
	 * @param  txt  text of parameter
	 * @return StringId from given token.
	 */
	protected UnrealId stringIdValue( String txt ) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealId.NONE;
		return unrealIdValue(txt);				
	}
	
	/**
	 * Return a boolean from boolean token in txt.
	 * <BR><BR>
	 * Boolean token is expected to be 'second token' in the 'txt' using delimiters " {}".	 
	 * 
	 * @param  txt  text of parameter
	 * @return Boolean from given token.
	 */
	protected boolean booleanValue(String txt) {
		try {
        	String token = getToken(txt, 1);
        	if (token.equals("True")) return true;
        	if (token.equals("true")) return true;
        	else return false;
        } catch (NullPointerException e) {
        	warning("Can't get boolean token from text '"+txt+"'.");
        	return false; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get boolean token from text '"+txt+"'.");
        	return false;
        }
	}
	
	/**
	 * Return an UnrealId instance from identificator token in txt.
	 * <BR><BR>
	 * Boolean token is expected to be 'second token' in the 'txt' using delimiters " {}".	 
	 * 
	 * @param  txt  text of parameter
	 * @return UnrealId from given token.
	 */
	protected UnrealId unrealIdValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealId.NONE;
		try {
        	String token = getToken(txt, 1);
        	if (token == null) {
        		warning("Can't get UnrealId token from text '"+txt+"'.");
        		return null;
        	}
        	return translator.getId(token);
        } catch (NullPointerException e) {
        	warning("Can't get UnrealId token from text '"+txt+"' (translator not set?).");
        	return null; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get UnrealId token from text '"+txt+"'.");
        	return null;
        }
	}
	
	/**
	 * Return an UnrealId instance from identificator token in txt.
	 * <BR><BR>
	 * Boolean token is expected to be 'second token' in the 'txt' using delimiters " {}".	 
	 * 
	 * @param  txt  text of parameter
	 * @return UnrealId from given token.
	 */
	protected UnrealId worldObjectIdValue(String txt) {
		if (txt == null || txt.toLowerCase().equals("none")) return UnrealId.NONE;
		try {
        	String token = getToken(txt, 1);
        	if (token == null) {
        		warning("Can't get UnrealId token from text '"+txt+"'.");
        		return null;
        	}
        	return translator.getId(token);
        } catch (NullPointerException e) {
        	warning("Can't get UnrealId token from text '"+txt+"' (translator not set?).");
        	return null; 
        } catch (Exception e) {
        	exceptionOccured(e, "Can't get UnrealId token from text '"+txt+"'.");
        	return null;
        }
	}
	
	private ITeamId teamId;
	
	/**
	 * Sets teamId that has to be slipped to every {@link IWorldObjectUpdatedEvent}.
	 */
	public void setTeamId(ITeamId teamId) {
		this.teamId = teamId;
	}
	
	private void setTeamId(IWorldObjectUpdatedEvent obj) {
       setPropertyByReflection( obj, "TeamId", ITeamId.class, (ITeamId)teamId );
	}
		
    // this is stack with static size, so it can overflow... theoreticly... No.
    private int[] stack = new int[10];
    private int stack_pos = 0;
  
 	// actual object that is being parsed 
    protected Object actObj;
  
    /**
     * Change state to state and push original state to stack, so parser can return in state_return
     */
    private void state_go(int state)
    {
  	    stack[stack_pos++] = yystate();
  	    yybegin(state);
    }
  
    /**
     * Return to previous state.
     */
    private void state_return()
    {
  	    yybegin(stack[--stack_pos]);
    }
%} 

%line
%char
%state UNPROCESSED_MESSAGE, MSG_AIN, MSG_ADG, MSG_ALIVE, MSG_ANIMATIONBOTID, MSG_CHANGEANIM, MSG_ANIMPORT, MSG_ANIMATIONSTOPPED, MSG_ATR, MSG_BEG, MSG_BOM, MSG_DAM, MSG_DIE, MSG_BMP, MSG_CWP, MSG_COMBO, MSG_CONFCH, MSG_CTRLMSG, MSG_DLGCMD, MSG_DFAIL, MSG_DOK, MSG_END, MSG_ENTERED, MSG_ENT, MSG_USED, MSG_FAL, MSG_FTR, MSG_FLG, MSG_NFO, MSG_PAUSED, MSG_GAMERESTART, MSG_RESUMED, MSG_GIVERES, MSG_VMS, MSG_EHS, MSG_SHS, MSG_HRN, MSG_HRP, MSG_HELLO_BOT, MSG_HELLO_CONTROL_SERVER, MSG_HELLO_OBSERVER, MSG_PRJ, MSG_INITED, MSG_IUO, MSG_INV, MSG_ITC, MSG_EITC, MSG_SITC, MSG_EINV, MSG_SINV, MSG_IPK, MSG_IRC, MSG_JUMP, MSG_KEYEVENT, MSG_LAND, MSG_UPD, MSG_LOCKED, MSG_LOSTCHILD, MSG_LIN, MSG_MAPCHANGE, MSG_FIN, MSG_IMAP, MSG_EMAP, MSG_SMAP, MSG_MOV, MSG_EMOV, MSG_SMOV, MSG_MUT, MSG_EMUT, MSG_SMUT, MSG_MYINV, MSG_EMYINV, MSG_SMYINV, MSG_NAV, MSG_ENAV, MSG_SNAV, MSG_INGP, MSG_ENGP, MSG_SNGP, MSG_SEL, MSG_PASSWDOK, MSG_PASSWDWRONG, MSG_PASSWORD, MSG_IPTH, MSG_EPTH, MSG_SPTH, MSG_PUO, MSG_PLR, MSG_HIT, MSG_PLI, MSG_JOIN, MSG_KIL, MSG_LEFT, MSG_EPLR, MSG_SPLR, MSG_PLS, MSG_PONG, MSG_RCH, MSG_RECEND, MSG_RECSTART, MSG_SLF, MSG_SHOOT, MSG_STOPSHOOT, MSG_SPW, MSG_SUO, MSG_TEAMCHANGE, MSG_VMT, MSG_TES, MSG_THROWN, MSG_TRC, MSG_TRG, MSG_VEH, MSG_VCH, MSG_WAL, MSG_WUP, MSG_ZCB
%full
%standalone
%unicode

ALPHA=[A-Za-z]
ALPHA_NUMERIC={ALPHA}|{DIGIT}
SEP=[_\-.]
ALPHA_NUMERIC_SEP = {ALPHA}|{DIGIT}|{SEP}
UNREALID={ALPHA_NUMERIC_SEP}+
MESSAGENAME={ALPHA_NUMERIC}+
WORLDOBJECTID={ALPHA_NUMERIC_SEP}+

DIGIT=[0-9]
NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]
NEWLINE=\r|\n|\r\n
WHITE_SPACE_CHAR=[\n\r\ \t\b\012]
UINT = {DIGIT}+

FLit1    = {DIGIT}+ \. {DIGIT}* 
FLit2    = \. {DIGIT}+ 
FLit3    = {DIGIT}+

INT = \-? {UINT}
INTEGER = \-? {UINT}
LONG = \-? {UINT}
FLOAT    = \-?({FLit1}|{FLit2}|{FLit3})
DOUBLE   = \-?({FLit1}|{FLit2}|{FLit3})
STRING=[^}]* 
STRINGID=[^}]+
ITEMTYPE = [^}]+
CATEGORY = [^}]+
POINT3D = {FLOAT} \, {FLOAT} \, {FLOAT}
VECTOR3D = {FLOAT} \, {FLOAT} \, {FLOAT}
LOCATION = {FLOAT} \, {FLOAT} \, {FLOAT}
VELOCITY = {FLOAT} \, {FLOAT} \, {FLOAT}
ROTATION = {FLOAT} \, {FLOAT} \, {FLOAT}
BOOLEAN = "True" | "False" | "true" | "false" | "Falso" | "falso"
SPACE= " "

%% 

<YYINITIAL> {


  "AIN" {
  	
  			actObj = new AddInventoryMsg();
  		
  	state_go(MSG_AIN);
  }

  "ADG" {
  	
  			actObj = new AdrenalineGained();
  		
  	state_go(MSG_ADG);
  }

  "ALIVE" {
  	
  			actObj = new AliveMessageMessage();
  		
  	state_go(MSG_ALIVE);
  }

  "ANIMATIONBOTID" {
  	
  			actObj = new AnimationBotID();
  		
  	state_go(MSG_ANIMATIONBOTID);
  }

  "CHANGEANIM" {
  	
  			actObj = new AnimationChange();
  		
  	state_go(MSG_CHANGEANIM);
  }

  "ANIMPORT" {
  	
  			actObj = new AnimationPort();
  		
  	state_go(MSG_ANIMPORT);
  }

  "ANIMATIONSTOPPED" {
  	
  			actObj = new AnimationStop();
  		
  	state_go(MSG_ANIMATIONSTOPPED);
  }

  "ATR" {
  	
  			actObj = new AutoTraceRayMessage();
  		
  	state_go(MSG_ATR);
  }

  "BEG" {
  	
  			actObj = new BeginMessage();
  		
  	state_go(MSG_BEG);
  }

  "BOM" {
  	
  			actObj = new BombInfoMessage();
  		
  	state_go(MSG_BOM);
  }

  "DAM" {
  	
  			actObj = new BotDamaged();
  		
  	state_go(MSG_DAM);
  }

  "DIE" {
  	
  			actObj = new BotKilled();
  		
  	state_go(MSG_DIE);
  }

  "BMP" {
  	
  			actObj = new Bumped();
  		
  	state_go(MSG_BMP);
  }

  "CWP" {
  	
  			actObj = new ChangedWeapon();
  		
  	state_go(MSG_CWP);
  }

  "COMBO" {
  	
  			actObj = new ComboStarted();
  		
  	state_go(MSG_COMBO);
  }

  "CONFCH" {
  	
  			actObj = new ConfigChangeMessage();
  		
  	state_go(MSG_CONFCH);
  }

  "CTRLMSG" {
  	
  			actObj = new ControlMessage();
  		
  	state_go(MSG_CTRLMSG);
  }

  "DLGCMD" {
  	
  			actObj = new DialogCommand();
  		
  	state_go(MSG_DLGCMD);
  }

  "DFAIL" {
  	
  			actObj = new DialogFailed();
  		
  	state_go(MSG_DFAIL);
  }

  "DOK" {
  	
  			actObj = new DialogOk();
  		
  	state_go(MSG_DOK);
  }

  "END" {
  	
  			actObj = new EndMessage();
  		
  	state_go(MSG_END);
  }

  "ENTERED" {
  	
  			actObj = new EnteredVehicle();
  		
  	state_go(MSG_ENTERED);
  }

  "ENT" {
  	
  			actObj = new EntityMessage();
  		
  	state_go(MSG_ENT);
  }

  "USED" {
  	
  			actObj = new FactoryUsed();
  		
  	state_go(MSG_USED);
  }

  "FAL" {
  	
  			actObj = new FallEdge();
  		
  	state_go(MSG_FAL);
  }

  "FTR" {
  	
  			actObj = new FastTraceResponse();
  		
  	state_go(MSG_FTR);
  }

  "FLG" {
  	
  			actObj = new FlagInfoMessage();
  		
  	state_go(MSG_FLG);
  }

  "NFO" {
  	
  			actObj = new GameInfoMessage();
  		
  	state_go(MSG_NFO);
  }

  "PAUSED" {
  	
  			actObj = new GamePaused();
  		
  	state_go(MSG_PAUSED);
  }

  "GAMERESTART" {
  	
  			actObj = new GameRestarted();
  		
  	state_go(MSG_GAMERESTART);
  }

  "RESUMED" {
  	
  			actObj = new GameResumed();
  		
  	state_go(MSG_RESUMED);
  }

  "GIVERES" {
  	
  			actObj = new GiveItemResult();
  		
  	state_go(MSG_GIVERES);
  }

  "VMS" {
  	
  			actObj = new GlobalChat();
  		
  	state_go(MSG_VMS);
  }

  "EHS" {
  	
  			actObj = new HandShakeEnd();
  		
  	state_go(MSG_EHS);
  }

  "SHS" {
  	
  			actObj = new HandShakeStart();
  		
  	state_go(MSG_SHS);
  }

  "HRN" {
  	
  			actObj = new HearNoise();
  		
  	state_go(MSG_HRN);
  }

  "HRP" {
  	
  			actObj = new HearPickup();
  		
  	state_go(MSG_HRP);
  }

  "HELLO_BOT" {
  	
  			actObj = new HelloBotHandshake();
  		
  	state_go(MSG_HELLO_BOT);
  }

  "HELLO_CONTROL_SERVER" {
  	
  			actObj = new HelloControlServerHandshake();
  		
  	state_go(MSG_HELLO_CONTROL_SERVER);
  }

  "HELLO_OBSERVER" {
  	
  			actObj = new HelloObserverHandshake();
  		
  	state_go(MSG_HELLO_OBSERVER);
  }

  "PRJ" {
  	
  			actObj = new IncomingProjectileMessage();
  		
  	state_go(MSG_PRJ);
  }

  "INITED" {
  	
  			actObj = new InitedMessageMessage();
  		
  	state_go(MSG_INITED);
  }

  "IUO" {
  	
  			actObj = new InteractedUsableObject();
  		
  	state_go(MSG_IUO);
  }

  "INV" {
  	
  			actObj = new ItemMessage();
  		
  	state_go(MSG_INV);
  }

  "ITC" {
  	
  			actObj = new ItemCategory();
  		
  	state_go(MSG_ITC);
  }

  "EITC" {
  	
  			actObj = new ItemCategoryEnd();
  		
  	state_go(MSG_EITC);
  }

  "SITC" {
  	
  			actObj = new ItemCategoryStart();
  		
  	state_go(MSG_SITC);
  }

  "EINV" {
  	
  			actObj = new ItemListEnd();
  		
  	state_go(MSG_EINV);
  }

  "SINV" {
  	
  			actObj = new ItemListStart();
  		
  	state_go(MSG_SINV);
  }

  "IPK" {
  	
  			actObj = new ItemPickedUp();
  		
  	state_go(MSG_IPK);
  }

  "IRC" {
  	
  			actObj = new ItemReceived();
  		
  	state_go(MSG_IRC);
  }

  "JUMP" {
  	
  			actObj = new JumpPerformed();
  		
  	state_go(MSG_JUMP);
  }

  "KEYEVENT" {
  	
  			actObj = new KeyEvent();
  		
  	state_go(MSG_KEYEVENT);
  }

  "LAND" {
  	
  			actObj = new Landed();
  		
  	state_go(MSG_LAND);
  }

  "UPD" {
  	
  			actObj = new LocationUpdate();
  		
  	state_go(MSG_UPD);
  }

  "LOCKED" {
  	
  			actObj = new LockedVehicle();
  		
  	state_go(MSG_LOCKED);
  }

  "LOSTCHILD" {
  	
  			actObj = new LostChild();
  		
  	state_go(MSG_LOSTCHILD);
  }

  "LIN" {
  	
  			actObj = new LostInventory();
  		
  	state_go(MSG_LIN);
  }

  "MAPCHANGE" {
  	
  			actObj = new MapChange();
  		
  	state_go(MSG_MAPCHANGE);
  }

  "FIN" {
  	
  			actObj = new MapFinished();
  		
  	state_go(MSG_FIN);
  }

  "IMAP" {
  	
  			actObj = new MapList();
  		
  	state_go(MSG_IMAP);
  }

  "EMAP" {
  	
  			actObj = new MapListEnd();
  		
  	state_go(MSG_EMAP);
  }

  "SMAP" {
  	
  			actObj = new MapListStart();
  		
  	state_go(MSG_SMAP);
  }

  "MOV" {
  	
  			actObj = new MoverMessage();
  		
  	state_go(MSG_MOV);
  }

  "EMOV" {
  	
  			actObj = new MoverListEnd();
  		
  	state_go(MSG_EMOV);
  }

  "SMOV" {
  	
  			actObj = new MoverListStart();
  		
  	state_go(MSG_SMOV);
  }

  "MUT" {
  	
  			actObj = new Mutator();
  		
  	state_go(MSG_MUT);
  }

  "EMUT" {
  	
  			actObj = new MutatorListEnd();
  		
  	state_go(MSG_EMUT);
  }

  "SMUT" {
  	
  			actObj = new MutatorListStart();
  		
  	state_go(MSG_SMUT);
  }

  "MYINV" {
  	
  			actObj = new MyInventoryMessage();
  		
  	state_go(MSG_MYINV);
  }

  "EMYINV" {
  	
  			actObj = new MyInventoryEnd();
  		
  	state_go(MSG_EMYINV);
  }

  "SMYINV" {
  	
  			actObj = new MyInventoryStart();
  		
  	state_go(MSG_SMYINV);
  }

  "NAV" {
  	
  			actObj = new NavPointMessage();
  		
  	state_go(MSG_NAV);
  }

  "ENAV" {
  	
  			actObj = new NavPointListEnd();
  		
  	state_go(MSG_ENAV);
  }

  "SNAV" {
  	
  			actObj = new NavPointListStart();
  		
  	state_go(MSG_SNAV);
  }

  "INGP" {
  	
  			actObj = new NavPointNeighbourLink();
  		
  	state_go(MSG_INGP);
  }

  "ENGP" {
  	
  			actObj = new NavPointNeighbourLinkEnd();
  		
  	state_go(MSG_ENGP);
  }

  "SNGP" {
  	
  			actObj = new NavPointNeighbourLinkStart();
  		
  	state_go(MSG_SNGP);
  }

  "SEL" {
  	
  			actObj = new ObjectSelected();
  		
  	state_go(MSG_SEL);
  }

  "PASSWDOK" {
  	
  			actObj = new PasswdOk();
  		
  	state_go(MSG_PASSWDOK);
  }

  "PASSWDWRONG" {
  	
  			actObj = new PasswdWrong();
  		
  	state_go(MSG_PASSWDWRONG);
  }

  "PASSWORD" {
  	
  			actObj = new Password();
  		
  	state_go(MSG_PASSWORD);
  }

  "IPTH" {
  	
  			actObj = new PathList();
  		
  	state_go(MSG_IPTH);
  }

  "EPTH" {
  	
  			actObj = new PathListEnd();
  		
  	state_go(MSG_EPTH);
  }

  "SPTH" {
  	
  			actObj = new PathListStart();
  		
  	state_go(MSG_SPTH);
  }

  "PUO" {
  	
  			actObj = new PickedUsableObject();
  		
  	state_go(MSG_PUO);
  }

  "PLR" {
  	
  			actObj = new PlayerMessage();
  		
  	state_go(MSG_PLR);
  }

  "HIT" {
  	
  			actObj = new PlayerDamaged();
  		
  	state_go(MSG_HIT);
  }

  "PLI" {
  	
  			actObj = new PlayerInput();
  		
  	state_go(MSG_PLI);
  }

  "JOIN" {
  	
  			actObj = new PlayerJoinsGame();
  		
  	state_go(MSG_JOIN);
  }

  "KIL" {
  	
  			actObj = new PlayerKilled();
  		
  	state_go(MSG_KIL);
  }

  "LEFT" {
  	
  			actObj = new PlayerLeft();
  		
  	state_go(MSG_LEFT);
  }

  "EPLR" {
  	
  			actObj = new PlayerListEnd();
  		
  	state_go(MSG_EPLR);
  }

  "SPLR" {
  	
  			actObj = new PlayerListStart();
  		
  	state_go(MSG_SPLR);
  }

  "PLS" {
  	
  			actObj = new PlayerScore();
  		
  	state_go(MSG_PLS);
  }

  "PONG" {
  	
  			actObj = new Pong();
  		
  	state_go(MSG_PONG);
  }

  "RCH" {
  	
  			actObj = new Reachable();
  		
  	state_go(MSG_RCH);
  }

  "RECEND" {
  	
  			actObj = new RecordingEnded();
  		
  	state_go(MSG_RECEND);
  }

  "RECSTART" {
  	
  			actObj = new RecordingStarted();
  		
  	state_go(MSG_RECSTART);
  }

  "SLF" {
  	
  			actObj = new SelfMessage();
  		
  	state_go(MSG_SLF);
  }

  "SHOOT" {
  	
  			actObj = new ShootingStarted();
  		
  	state_go(MSG_SHOOT);
  }

  "STOPSHOOT" {
  	
  			actObj = new ShootingStopped();
  		
  	state_go(MSG_STOPSHOOT);
  }

  "SPW" {
  	
  			actObj = new Spawn();
  		
  	state_go(MSG_SPW);
  }

  "SUO" {
  	
  			actObj = new SpawnedUsableObject();
  		
  	state_go(MSG_SUO);
  }

  "TEAMCHANGE" {
  	
  			actObj = new TeamChanged();
  		
  	state_go(MSG_TEAMCHANGE);
  }

  "VMT" {
  	
  			actObj = new TeamChat();
  		
  	state_go(MSG_VMT);
  }

  "TES" {
  	
  			actObj = new TeamScoreMessage();
  		
  	state_go(MSG_TES);
  }

  "THROWN" {
  	
  			actObj = new Thrown();
  		
  	state_go(MSG_THROWN);
  }

  "TRC" {
  	
  			actObj = new TraceResponse();
  		
  	state_go(MSG_TRC);
  }

  "TRG" {
  	
  			actObj = new Trigger();
  		
  	state_go(MSG_TRG);
  }

  "VEH" {
  	
  			actObj = new VehicleMessage();
  		
  	state_go(MSG_VEH);
  }

  "VCH" {
  	
  			actObj = new VolumeChanged();
  		
  	state_go(MSG_VCH);
  }

  "WAL" {
  	
  			actObj = new WallCollision();
  		
  	state_go(MSG_WAL);
  }

  "WUP" {
  	
  			actObj = new WeaponUpdate();
  		
  	state_go(MSG_WUP);
  }

  "ZCB" {
  	
  			actObj = new ZoneChangedBot();
  		
  	state_go(MSG_ZCB);
  }


}



<MSG_AIN> {
  	
			"{Id " {UNREALID} "}" {
				
						((AddInventoryMsg)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((AddInventoryMsg)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{PickupType " {ITEMTYPE} "}" {
				
						((AddInventoryMsg)actObj).
					PickupType = itemTypeValue(yytext());
				
					((AddInventoryMsg)actObj).Descriptor = itemDescriptorValue(((AddInventoryMsg)actObj).PickupType);
				
			}
		
			"{Sniping " {BOOLEAN} "}" {
				
						((AddInventoryMsg)actObj).
					Sniping = booleanValue(yytext());
				
			}
		
			"{Melee " {BOOLEAN} "}" {
				
						((AddInventoryMsg)actObj).
					Melee = booleanValue(yytext());
				
			}
		
			"{PrimaryInitialAmmo " {INT} "}" {
				
						((AddInventoryMsg)actObj).
					PrimaryInitialAmmo = intValue(yytext());
				
			}
		
			"{MaxPrimaryAmmo " {INT} "}" {
				
						((AddInventoryMsg)actObj).
					MaxPrimaryAmmo = intValue(yytext());
				
			}
		
			"{SecondaryInitialAmmo " {INT} "}" {
				
						((AddInventoryMsg)actObj).
					SecondaryInitialAmmo = intValue(yytext());
				
			}
		
			"{MaxSecondaryAmmo " {INT} "}" {
				
						((AddInventoryMsg)actObj).
					MaxSecondaryAmmo = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_AIN unprocessed: " + yytext());
		}
  	}
}

<MSG_ADG> {
  	
			"{Amount " {INT} "}" {
				
						((AdrenalineGained)actObj).
					Amount = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ADG unprocessed: " + yytext());
		}
  	}
}

<MSG_ALIVE> {
  	
			"{Time " {DOUBLE} "}" {
				
						((AliveMessageMessage)actObj).
					Time = doubleValue(yytext());
				
					((AliveMessageMessage)actObj).Time_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ALIVE unprocessed: " + yytext());
		}
  	}
}

<MSG_ANIMATIONBOTID> {
  	
			"{id " {INT} "}" {
				
						((AnimationBotID)actObj).
					id = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ANIMATIONBOTID unprocessed: " + yytext());
		}
  	}
}

<MSG_CHANGEANIM> {
  	
			"{Name " {STRING} "}" {
				
						((AnimationChange)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{AnimStart " {BOOLEAN} "}" {
				
						((AnimationChange)actObj).
					AnimStart = booleanValue(yytext());
				
			}
		
			"{AnimEnd " {BOOLEAN} "}" {
				
						((AnimationChange)actObj).
					AnimEnd = booleanValue(yytext());
				
			}
		
			"{Time " {DOUBLE} "}" {
				
						((AnimationChange)actObj).
					Time = doubleValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_CHANGEANIM unprocessed: " + yytext());
		}
  	}
}

<MSG_ANIMPORT> {
  	
			"{Port " {INT} "}" {
				
						((AnimationPort)actObj).
					Port = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ANIMPORT unprocessed: " + yytext());
		}
  	}
}

<MSG_ANIMATIONSTOPPED> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ANIMATIONSTOPPED unprocessed: " + yytext());
		}
  	}
}

<MSG_ATR> {
  	
			"{Id " {UNREALID} "}" {
				
						((AutoTraceRayMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((AutoTraceRayMessage)actObj).Id_Set = true;
				
			}
		
			"{From " {LOCATION} "}" {
				
						((AutoTraceRayMessage)actObj).
					From = locationValue(yytext());
				
					((AutoTraceRayMessage)actObj).From_Set = true;
				
			}
		
			"{To " {LOCATION} "}" {
				
						((AutoTraceRayMessage)actObj).
					To = locationValue(yytext());
				
					((AutoTraceRayMessage)actObj).To_Set = true;
				
			}
		
			"{FastTrace " {BOOLEAN} "}" {
				
						((AutoTraceRayMessage)actObj).
					FastTrace = booleanValue(yytext());
				
					((AutoTraceRayMessage)actObj).FastTrace_Set = true;
				
			}
		
			"{FloorCorrection " {BOOLEAN} "}" {
				
						((AutoTraceRayMessage)actObj).
					FloorCorrection = booleanValue(yytext());
				
					((AutoTraceRayMessage)actObj).FloorCorrection_Set = true;
				
			}
		
			"{Result " {BOOLEAN} "}" {
				
						((AutoTraceRayMessage)actObj).
					Result = booleanValue(yytext());
				
					((AutoTraceRayMessage)actObj).Result_Set = true;
				
			}
		
			"{HitNormal " {VECTOR3D} "}" {
				
						((AutoTraceRayMessage)actObj).
					HitNormal = vector3dValue(yytext());
				
					((AutoTraceRayMessage)actObj).HitNormal_Set = true;
				
			}
		
			"{HitLocation " {LOCATION} "}" {
				
						((AutoTraceRayMessage)actObj).
					HitLocation = locationValue(yytext());
				
					((AutoTraceRayMessage)actObj).HitLocation_Set = true;
				
			}
		
			"{TraceActors " {BOOLEAN} "}" {
				
						((AutoTraceRayMessage)actObj).
					TraceActors = booleanValue(yytext());
				
					((AutoTraceRayMessage)actObj).TraceActors_Set = true;
				
			}
		
			"{HitId " {UNREALID} "}" {
				
						((AutoTraceRayMessage)actObj).
					HitId = unrealIdValue(yytext());
				
					((AutoTraceRayMessage)actObj).HitId_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ATR unprocessed: " + yytext());
		}
  	}
}

<MSG_BEG> {
  	
			"{Time " {DOUBLE} "}" {
				
						((BeginMessage)actObj).
					Time = doubleValue(yytext());
				
			}
		
			"{VisUpdate " {BOOLEAN} "}" {
				
						((BeginMessage)actObj).
					VisUpdate = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_BEG unprocessed: " + yytext());
		}
  	}
}

<MSG_BOM> {
  	
			"{Id " {UNREALID} "}" {
				
						((BombInfoMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((BombInfoMessage)actObj).Id_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((BombInfoMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((BombInfoMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((BombInfoMessage)actObj).
					Location = locationValue(yytext());
				
					((BombInfoMessage)actObj).Location_Set = true;
				
			}
		
			"{Holder " {UNREALID} "}" {
				
						((BombInfoMessage)actObj).
					Holder = unrealIdValue(yytext());
				
					((BombInfoMessage)actObj).Holder_Set = true;
				
			}
		
			"{HolderTeam " {INTEGER} "}" {
				
						((BombInfoMessage)actObj).
					HolderTeam = integerValue(yytext());
				
					((BombInfoMessage)actObj).HolderTeam_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((BombInfoMessage)actObj).
					Visible = booleanValue(yytext());
				
					((BombInfoMessage)actObj).Visible_Set = true;
				
			}
		
			"{State " {STRING} "}" {
				
						((BombInfoMessage)actObj).
					State = stringValue(yytext());
				
					((BombInfoMessage)actObj).State_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_BOM unprocessed: " + yytext());
		}
  	}
}

<MSG_DAM> {
  	
			"{Damage " {INT} "}" {
				
						((BotDamaged)actObj).
					Damage = intValue(yytext());
				
			}
		
			"{DamageType " {STRING} "}" {
				
						((BotDamaged)actObj).
					DamageType = stringValue(yytext());
				
			}
		
			"{WeaponName " {STRING} "}" {
				
						((BotDamaged)actObj).
					WeaponName = stringValue(yytext());
				
			}
		
			"{Flaming " {BOOLEAN} "}" {
				
						((BotDamaged)actObj).
					Flaming = booleanValue(yytext());
				
			}
		
			"{CausedByWorld " {BOOLEAN} "}" {
				
						((BotDamaged)actObj).
					CausedByWorld = booleanValue(yytext());
				
			}
		
			"{DirectDamage " {BOOLEAN} "}" {
				
						((BotDamaged)actObj).
					DirectDamage = booleanValue(yytext());
				
			}
		
			"{BulletHit " {BOOLEAN} "}" {
				
						((BotDamaged)actObj).
					BulletHit = booleanValue(yytext());
				
			}
		
			"{VehicleHit " {BOOLEAN} "}" {
				
						((BotDamaged)actObj).
					VehicleHit = booleanValue(yytext());
				
			}
		
			"{Instigator " {UNREALID} "}" {
				
						((BotDamaged)actObj).
					Instigator = unrealIdValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_DAM unprocessed: " + yytext());
		}
  	}
}

<MSG_DIE> {
  	
			"{Killer " {UNREALID} "}" {
				
						((BotKilled)actObj).
					Killer = unrealIdValue(yytext());
				
			}
		
			"{DamageType " {STRING} "}" {
				
						((BotKilled)actObj).
					DamageType = stringValue(yytext());
				
			}
		
			"{DeathString " {STRING} "}" {
				
						((BotKilled)actObj).
					DeathString = stringValue(yytext());
				
			}
		
			"{WeaponName " {STRING} "}" {
				
						((BotKilled)actObj).
					WeaponName = stringValue(yytext());
				
			}
		
			"{Flaming " {BOOLEAN} "}" {
				
						((BotKilled)actObj).
					Flaming = booleanValue(yytext());
				
			}
		
			"{CausedByWorld " {BOOLEAN} "}" {
				
						((BotKilled)actObj).
					CausedByWorld = booleanValue(yytext());
				
			}
		
			"{DirectDamage " {BOOLEAN} "}" {
				
						((BotKilled)actObj).
					DirectDamage = booleanValue(yytext());
				
			}
		
			"{BulletHit " {BOOLEAN} "}" {
				
						((BotKilled)actObj).
					BulletHit = booleanValue(yytext());
				
			}
		
			"{VehicleHit " {BOOLEAN} "}" {
				
						((BotKilled)actObj).
					VehicleHit = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_DIE unprocessed: " + yytext());
		}
  	}
}

<MSG_BMP> {
  	
			"{Id " {UNREALID} "}" {
				
						((Bumped)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((Bumped)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_BMP unprocessed: " + yytext());
		}
  	}
}

<MSG_CWP> {
  	
			"{Id " {STRING} "}" {
				
						((ChangedWeapon)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{PrimaryAmmo " {INT} "}" {
				
						((ChangedWeapon)actObj).
					PrimaryAmmo = intValue(yytext());
				
			}
		
			"{SecondaryAmmo " {INT} "}" {
				
						((ChangedWeapon)actObj).
					SecondaryAmmo = intValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((ChangedWeapon)actObj).
					Type = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_CWP unprocessed: " + yytext());
		}
  	}
}

<MSG_COMBO> {
  	
			"{Type " {STRING} "}" {
				
						((ComboStarted)actObj).
					Type = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_COMBO unprocessed: " + yytext());
		}
  	}
}

<MSG_CONFCH> {
  	
			"{Id " {UNREALID} "}" {
				
						((ConfigChangeMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((ConfigChangeMessage)actObj).Id_Set = true;
				
			}
		
			"{BotId " {UNREALID} "}" {
				
						((ConfigChangeMessage)actObj).
					BotId = unrealIdValue(yytext());
				
					((ConfigChangeMessage)actObj).BotId_Set = true;
				
			}
		
			"{ManualSpawn " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					ManualSpawn = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).ManualSpawn_Set = true;
				
			}
		
			"{AutoTrace " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					AutoTrace = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).AutoTrace_Set = true;
				
			}
		
			"{Name " {STRING} "}" {
				
						((ConfigChangeMessage)actObj).
					Name = stringValue(yytext());
				
					((ConfigChangeMessage)actObj).Name_Set = true;
				
			}
		
			"{SpeedMultiplier " {DOUBLE} "}" {
				
						((ConfigChangeMessage)actObj).
					SpeedMultiplier = doubleValue(yytext());
				
					((ConfigChangeMessage)actObj).SpeedMultiplier_Set = true;
				
			}
		
			"{RotationRate " {ROTATION} "}" {
				
						((ConfigChangeMessage)actObj).
					RotationRate = rotationValue(yytext());
				
					((ConfigChangeMessage)actObj).RotationRate_Set = true;
				
			}
		
			"{Invulnerable " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					Invulnerable = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).Invulnerable_Set = true;
				
			}
		
			"{SelfUpdateTime " {DOUBLE} "}" {
				
						((ConfigChangeMessage)actObj).
					SelfUpdateTime = doubleValue(yytext());
				
					((ConfigChangeMessage)actObj).SelfUpdateTime_Set = true;
				
			}
		
			"{VisionTime " {DOUBLE} "}" {
				
						((ConfigChangeMessage)actObj).
					VisionTime = doubleValue(yytext());
				
					((ConfigChangeMessage)actObj).VisionTime_Set = true;
				
			}
		
			"{LocUpdateMultiplier " {INT} "}" {
				
						((ConfigChangeMessage)actObj).
					LocUpdateMultiplier = intValue(yytext());
				
					((ConfigChangeMessage)actObj).LocUpdateMultiplier_Set = true;
				
			}
		
			"{ShowDebug " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					ShowDebug = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).ShowDebug_Set = true;
				
			}
		
			"{ShowFocalPoint " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					ShowFocalPoint = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).ShowFocalPoint_Set = true;
				
			}
		
			"{DrawTraceLines " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					DrawTraceLines = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).DrawTraceLines_Set = true;
				
			}
		
			"{SynchronousOff " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					SynchronousOff = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).SynchronousOff_Set = true;
				
			}
		
			"{AutoPickupOff " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					AutoPickupOff = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).AutoPickupOff_Set = true;
				
			}
		
			"{SyncNavpoints " {BOOLEAN} "}" {
				
						((ConfigChangeMessage)actObj).
					SyncNavpoints = booleanValue(yytext());
				
					((ConfigChangeMessage)actObj).SyncNavpoints_Set = true;
				
			}
		
			"{VisionFOV " {DOUBLE} "}" {
				
						((ConfigChangeMessage)actObj).
					VisionFOV = doubleValue(yytext());
				
					((ConfigChangeMessage)actObj).VisionFOV_Set = true;
				
			}
		
			"{Action " {STRING} "}" {
				
						((ConfigChangeMessage)actObj).
					Action = stringValue(yytext());
				
					((ConfigChangeMessage)actObj).Action_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_CONFCH unprocessed: " + yytext());
		}
  	}
}

<MSG_CTRLMSG> {
  	
			"{Type " {STRING} "}" {
				
						((ControlMessage)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{PS1 " {STRING} "}" {
				
						((ControlMessage)actObj).
					PS1 = stringValue(yytext());
				
			}
		
			"{PS2 " {STRING} "}" {
				
						((ControlMessage)actObj).
					PS2 = stringValue(yytext());
				
			}
		
			"{PS3 " {STRING} "}" {
				
						((ControlMessage)actObj).
					PS3 = stringValue(yytext());
				
			}
		
			"{PI1 " {INTEGER} "}" {
				
						((ControlMessage)actObj).
					PI1 = integerValue(yytext());
				
			}
		
			"{PI2 " {INTEGER} "}" {
				
						((ControlMessage)actObj).
					PI2 = integerValue(yytext());
				
			}
		
			"{PI3 " {INTEGER} "}" {
				
						((ControlMessage)actObj).
					PI3 = integerValue(yytext());
				
			}
		
			"{PF1 " {DOUBLE} "}" {
				
						((ControlMessage)actObj).
					PF1 = doubleValue(yytext());
				
			}
		
			"{PF2 " {DOUBLE} "}" {
				
						((ControlMessage)actObj).
					PF2 = doubleValue(yytext());
				
			}
		
			"{PF3 " {DOUBLE} "}" {
				
						((ControlMessage)actObj).
					PF3 = doubleValue(yytext());
				
			}
		
			"{PB1 " {BOOLEAN} "}" {
				
						((ControlMessage)actObj).
					PB1 = booleanValue(yytext());
				
			}
		
			"{PB2 " {BOOLEAN} "}" {
				
						((ControlMessage)actObj).
					PB2 = booleanValue(yytext());
				
			}
		
			"{PB3 " {BOOLEAN} "}" {
				
						((ControlMessage)actObj).
					PB3 = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_CTRLMSG unprocessed: " + yytext());
		}
  	}
}

<MSG_DLGCMD> {
  	
			"{Id " {STRING} "}" {
				
						((DialogCommand)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{SourceId " {STRING} "}" {
				
						((DialogCommand)actObj).
					SourceId = stringValue(yytext());
				
			}
		
			"{Command " {STRING} "}" {
				
						((DialogCommand)actObj).
					Command = stringValue(yytext());
				
			}
		
			"{Data " {STRING} "}" {
				
						((DialogCommand)actObj).
					Data = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_DLGCMD unprocessed: " + yytext());
		}
  	}
}

<MSG_DFAIL> {
  	
			"{Id " {STRING} "}" {
				
						((DialogFailed)actObj).
					Id = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_DFAIL unprocessed: " + yytext());
		}
  	}
}

<MSG_DOK> {
  	
			"{Id " {STRING} "}" {
				
						((DialogOk)actObj).
					Id = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_DOK unprocessed: " + yytext());
		}
  	}
}

<MSG_END> {
  	
			"{Time " {DOUBLE} "}" {
				
						((EndMessage)actObj).
					Time = doubleValue(yytext());
				
			}
		
			"{VisUpdate " {BOOLEAN} "}" {
				
						((EndMessage)actObj).
					VisUpdate = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_END unprocessed: " + yytext());
		}
  	}
}

<MSG_ENTERED> {
  	
			"{Id " {UNREALID} "}" {
				
						((EnteredVehicle)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((EnteredVehicle)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((EnteredVehicle)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ENTERED unprocessed: " + yytext());
		}
  	}
}

<MSG_ENT> {
  	
			"{Id " {UNREALID} "}" {
				
						((EntityMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((EntityMessage)actObj).Id_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((EntityMessage)actObj).
					Visible = booleanValue(yytext());
				
					((EntityMessage)actObj).Visible_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((EntityMessage)actObj).
					Location = locationValue(yytext());
				
					((EntityMessage)actObj).Location_Set = true;
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((EntityMessage)actObj).
					Rotation = rotationValue(yytext());
				
					((EntityMessage)actObj).Rotation_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((EntityMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((EntityMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Type " {STRING} "}" {
				
						((EntityMessage)actObj).
					Type = stringValue(yytext());
				
					((EntityMessage)actObj).Type_Set = true;
				
			}
		
			"{EntityClass " {STRING} "}" {
				
						((EntityMessage)actObj).
					EntityClass = stringValue(yytext());
				
					((EntityMessage)actObj).EntityClass_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ENT unprocessed: " + yytext());
		}
  	}
}

<MSG_USED> {
  	
			"{Success " {BOOLEAN} "}" {
				
						((FactoryUsed)actObj).
					Success = booleanValue(yytext());
				
			}
		
			"{Reason " {STRING} "}" {
				
						((FactoryUsed)actObj).
					Reason = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_USED unprocessed: " + yytext());
		}
  	}
}

<MSG_FAL> {
  	
			"{Fell " {BOOLEAN} "}" {
				
						((FallEdge)actObj).
					Fell = booleanValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((FallEdge)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_FAL unprocessed: " + yytext());
		}
  	}
}

<MSG_FTR> {
  	
			"{Id " {STRING} "}" {
				
						((FastTraceResponse)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{From " {LOCATION} "}" {
				
						((FastTraceResponse)actObj).
					From = locationValue(yytext());
				
			}
		
			"{To " {LOCATION} "}" {
				
						((FastTraceResponse)actObj).
					To = locationValue(yytext());
				
			}
		
			"{Result " {BOOLEAN} "}" {
				
						((FastTraceResponse)actObj).
					Result = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_FTR unprocessed: " + yytext());
		}
  	}
}

<MSG_FLG> {
  	
			"{Id " {UNREALID} "}" {
				
						((FlagInfoMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((FlagInfoMessage)actObj).Id_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((FlagInfoMessage)actObj).
					Location = locationValue(yytext());
				
					((FlagInfoMessage)actObj).Location_Set = true;
				
			}
		
			"{Holder " {UNREALID} "}" {
				
						((FlagInfoMessage)actObj).
					Holder = unrealIdValue(yytext());
				
					((FlagInfoMessage)actObj).Holder_Set = true;
				
			}
		
			"{Team " {INTEGER} "}" {
				
						((FlagInfoMessage)actObj).
					Team = integerValue(yytext());
				
					((FlagInfoMessage)actObj).Team_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((FlagInfoMessage)actObj).
					Visible = booleanValue(yytext());
				
					((FlagInfoMessage)actObj).Visible_Set = true;
				
			}
		
			"{State " {STRING} "}" {
				
						((FlagInfoMessage)actObj).
					State = stringValue(yytext());
				
					((FlagInfoMessage)actObj).State_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_FLG unprocessed: " + yytext());
		}
  	}
}

<MSG_NFO> {
  	
			"{Gametype " {STRING} "}" {
				
						((GameInfoMessage)actObj).
					Gametype = stringValue(yytext());
				
					((GameInfoMessage)actObj).Gametype_Set = true;
				
			}
		
			"{Level " {STRING} "}" {
				
						((GameInfoMessage)actObj).
					Level = stringValue(yytext());
				
					((GameInfoMessage)actObj).Level_Set = true;
				
			}
		
			"{WeaponStay " {BOOLEAN} "}" {
				
						((GameInfoMessage)actObj).
					WeaponStay = booleanValue(yytext());
				
					((GameInfoMessage)actObj).WeaponStay_Set = true;
				
			}
		
			"{TimeLimit " {DOUBLE} "}" {
				
						((GameInfoMessage)actObj).
					TimeLimit = doubleValue(yytext());
				
					((GameInfoMessage)actObj).TimeLimit_Set = true;
				
			}
		
			"{FragLimit " {INT} "}" {
				
						((GameInfoMessage)actObj).
					FragLimit = intValue(yytext());
				
					((GameInfoMessage)actObj).FragLimit_Set = true;
				
			}
		
			"{GoalTeamScore " {LONG} "}" {
				
						((GameInfoMessage)actObj).
					GoalTeamScore = longValue(yytext());
				
					((GameInfoMessage)actObj).GoalTeamScore_Set = true;
				
			}
		
			"{MaxTeams " {INT} "}" {
				
						((GameInfoMessage)actObj).
					MaxTeams = intValue(yytext());
				
					((GameInfoMessage)actObj).MaxTeams_Set = true;
				
			}
		
			"{MaxTeamSize " {INT} "}" {
				
						((GameInfoMessage)actObj).
					MaxTeamSize = intValue(yytext());
				
					((GameInfoMessage)actObj).MaxTeamSize_Set = true;
				
			}
		
			"{RedBaseLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					RedBaseLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).RedBaseLocation_Set = true;
				
			}
		
			"{BlueBaseLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					BlueBaseLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).BlueBaseLocation_Set = true;
				
			}
		
			"{FirstDomPointLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					FirstDomPointLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).FirstDomPointLocation_Set = true;
				
			}
		
			"{SecondDomPointLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					SecondDomPointLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).SecondDomPointLocation_Set = true;
				
			}
		
			"{GamePaused " {BOOLEAN} "}" {
				
						((GameInfoMessage)actObj).
					GamePaused = booleanValue(yytext());
				
					((GameInfoMessage)actObj).GamePaused_Set = true;
				
			}
		
			"{BotsPaused " {BOOLEAN} "}" {
				
						((GameInfoMessage)actObj).
					BotsPaused = booleanValue(yytext());
				
					((GameInfoMessage)actObj).BotsPaused_Set = true;
				
			}
		
			"{FactoryLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					FactoryLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).FactoryLocation_Set = true;
				
			}
		
			"{FactoryRadius " {DOUBLE} "}" {
				
						((GameInfoMessage)actObj).
					FactoryRadius = doubleValue(yytext());
				
					((GameInfoMessage)actObj).FactoryRadius_Set = true;
				
			}
		
			"{DisperserLocation " {LOCATION} "}" {
				
						((GameInfoMessage)actObj).
					DisperserLocation = locationValue(yytext());
				
					((GameInfoMessage)actObj).DisperserLocation_Set = true;
				
			}
		
			"{DisperserRadius " {DOUBLE} "}" {
				
						((GameInfoMessage)actObj).
					DisperserRadius = doubleValue(yytext());
				
					((GameInfoMessage)actObj).DisperserRadius_Set = true;
				
			}
		
			"{FactoryAdrenalineCount " {DOUBLE} "}" {
				
						((GameInfoMessage)actObj).
					FactoryAdrenalineCount = doubleValue(yytext());
				
					((GameInfoMessage)actObj).FactoryAdrenalineCount_Set = true;
				
			}
		
			"{FactorySpawnType " {STRING} "}" {
				
						((GameInfoMessage)actObj).
					FactorySpawnType = stringValue(yytext());
				
					((GameInfoMessage)actObj).FactorySpawnType_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_NFO unprocessed: " + yytext());
		}
  	}
}

<MSG_PAUSED> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PAUSED unprocessed: " + yytext());
		}
  	}
}

<MSG_GAMERESTART> {
  	
			"{Started " {BOOLEAN} "}" {
				
						((GameRestarted)actObj).
					Started = booleanValue(yytext());
				
			}
		
			"{Finished " {BOOLEAN} "}" {
				
						((GameRestarted)actObj).
					Finished = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_GAMERESTART unprocessed: " + yytext());
		}
  	}
}

<MSG_RESUMED> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_RESUMED unprocessed: " + yytext());
		}
  	}
}

<MSG_GIVERES> {
  	
			"{TargetId " {UNREALID} "}" {
				
						((GiveItemResult)actObj).
					TargetId = unrealIdValue(yytext());
				
			}
		
			"{ItemId " {UNREALID} "}" {
				
						((GiveItemResult)actObj).
					ItemId = unrealIdValue(yytext());
				
			}
		
			"{ItemType " {STRING} "}" {
				
						((GiveItemResult)actObj).
					ItemType = stringValue(yytext());
				
			}
		
			"{Result " {BOOLEAN} "}" {
				
						((GiveItemResult)actObj).
					Result = booleanValue(yytext());
				
			}
		
			"{Reason " {STRING} "}" {
				
						((GiveItemResult)actObj).
					Reason = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_GIVERES unprocessed: " + yytext());
		}
  	}
}

<MSG_VMS> {
  	
			"{Id " {UNREALID} "}" {
				
						((GlobalChat)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Name " {STRING} "}" {
				
						((GlobalChat)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{ControlServer " {BOOLEAN} "}" {
				
						((GlobalChat)actObj).
					ControlServer = booleanValue(yytext());
				
			}
		
			"{Text " {STRING} "}" {
				
						((GlobalChat)actObj).
					Text = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_VMS unprocessed: " + yytext());
		}
  	}
}

<MSG_EHS> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EHS unprocessed: " + yytext());
		}
  	}
}

<MSG_SHS> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SHS unprocessed: " + yytext());
		}
  	}
}

<MSG_HRN> {
  	
			"{Source " {UNREALID} "}" {
				
						((HearNoise)actObj).
					Source = unrealIdValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((HearNoise)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((HearNoise)actObj).
					Rotation = rotationValue(yytext());
				
			}
		
			"{Distance " {DOUBLE} "}" {
				
						((HearNoise)actObj).
					Distance = doubleValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HRN unprocessed: " + yytext());
		}
  	}
}

<MSG_HRP> {
  	
			"{Source " {UNREALID} "}" {
				
						((HearPickup)actObj).
					Source = unrealIdValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((HearPickup)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((HearPickup)actObj).
					Rotation = rotationValue(yytext());
				
			}
		
			"{Distance " {DOUBLE} "}" {
				
						((HearPickup)actObj).
					Distance = doubleValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HRP unprocessed: " + yytext());
		}
  	}
}

<MSG_HELLO_BOT> {
  	
			"{ServerFull " {BOOLEAN} "}" {
				
						((HelloBotHandshake)actObj).
					ServerFull = booleanValue(yytext());
				
			}
		
			"{Game " {STRING} "}" {
				
						((HelloBotHandshake)actObj).
					Game = stringValue(yytext());
				
			}
		
			"{Version " {STRING} "}" {
				
						((HelloBotHandshake)actObj).
					Version = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HELLO_BOT unprocessed: " + yytext());
		}
  	}
}

<MSG_HELLO_CONTROL_SERVER> {
  	
			"{Game " {STRING} "}" {
				
						((HelloControlServerHandshake)actObj).
					Game = stringValue(yytext());
				
			}
		
			"{Version " {STRING} "}" {
				
						((HelloControlServerHandshake)actObj).
					Version = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HELLO_CONTROL_SERVER unprocessed: " + yytext());
		}
  	}
}

<MSG_HELLO_OBSERVER> {
  	
			"{Game " {STRING} "}" {
				
						((HelloObserverHandshake)actObj).
					Game = stringValue(yytext());
				
			}
		
			"{Version " {STRING} "}" {
				
						((HelloObserverHandshake)actObj).
					Version = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HELLO_OBSERVER unprocessed: " + yytext());
		}
  	}
}

<MSG_PRJ> {
  	
			"{Id " {UNREALID} "}" {
				
						((IncomingProjectileMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((IncomingProjectileMessage)actObj).Id_Set = true;
				
			}
		
			"{ImpactTime " {DOUBLE} "}" {
				
						((IncomingProjectileMessage)actObj).
					ImpactTime = doubleValue(yytext());
				
					((IncomingProjectileMessage)actObj).ImpactTime_Set = true;
				
			}
		
			"{Direction " {VECTOR3D} "}" {
				
						((IncomingProjectileMessage)actObj).
					Direction = vector3dValue(yytext());
				
					((IncomingProjectileMessage)actObj).Direction_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((IncomingProjectileMessage)actObj).
					Location = locationValue(yytext());
				
					((IncomingProjectileMessage)actObj).Location_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((IncomingProjectileMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((IncomingProjectileMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Speed " {DOUBLE} "}" {
				
						((IncomingProjectileMessage)actObj).
					Speed = doubleValue(yytext());
				
					((IncomingProjectileMessage)actObj).Speed_Set = true;
				
			}
		
			"{Origin " {LOCATION} "}" {
				
						((IncomingProjectileMessage)actObj).
					Origin = locationValue(yytext());
				
					((IncomingProjectileMessage)actObj).Origin_Set = true;
				
			}
		
			"{DamageRadius " {DOUBLE} "}" {
				
						((IncomingProjectileMessage)actObj).
					DamageRadius = doubleValue(yytext());
				
					((IncomingProjectileMessage)actObj).DamageRadius_Set = true;
				
			}
		
			"{Type " {STRING} "}" {
				
						((IncomingProjectileMessage)actObj).
					Type = stringValue(yytext());
				
					((IncomingProjectileMessage)actObj).Type_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((IncomingProjectileMessage)actObj).
					Visible = booleanValue(yytext());
				
					((IncomingProjectileMessage)actObj).Visible_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PRJ unprocessed: " + yytext());
		}
  	}
}

<MSG_INITED> {
  	
			"{BotId " {UNREALID} "}" {
				
						((InitedMessageMessage)actObj).
					BotId = unrealIdValue(yytext());
				
					((InitedMessageMessage)actObj).BotId_Set = true;
				
			}
		
			"{HealthStart " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					HealthStart = intValue(yytext());
				
					((InitedMessageMessage)actObj).HealthStart_Set = true;
				
			}
		
			"{HealthFull " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					HealthFull = intValue(yytext());
				
					((InitedMessageMessage)actObj).HealthFull_Set = true;
				
			}
		
			"{HealthMax " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					HealthMax = intValue(yytext());
				
					((InitedMessageMessage)actObj).HealthMax_Set = true;
				
			}
		
			"{AdrenalineStart " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					AdrenalineStart = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).AdrenalineStart_Set = true;
				
			}
		
			"{AdrenalineMax " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					AdrenalineMax = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).AdrenalineMax_Set = true;
				
			}
		
			"{ShieldStrengthStart " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					ShieldStrengthStart = intValue(yytext());
				
					((InitedMessageMessage)actObj).ShieldStrengthStart_Set = true;
				
			}
		
			"{ShieldStrengthMax " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					ShieldStrengthMax = intValue(yytext());
				
					((InitedMessageMessage)actObj).ShieldStrengthMax_Set = true;
				
			}
		
			"{MaxMultiJump " {INT} "}" {
				
						((InitedMessageMessage)actObj).
					MaxMultiJump = intValue(yytext());
				
					((InitedMessageMessage)actObj).MaxMultiJump_Set = true;
				
			}
		
			"{DamageScaling " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					DamageScaling = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).DamageScaling_Set = true;
				
			}
		
			"{GroundSpeed " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					GroundSpeed = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).GroundSpeed_Set = true;
				
			}
		
			"{WaterSpeed " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					WaterSpeed = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).WaterSpeed_Set = true;
				
			}
		
			"{AirSpeed " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					AirSpeed = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).AirSpeed_Set = true;
				
			}
		
			"{LadderSpeed " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					LadderSpeed = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).LadderSpeed_Set = true;
				
			}
		
			"{AccelRate " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					AccelRate = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).AccelRate_Set = true;
				
			}
		
			"{JumpZ " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					JumpZ = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).JumpZ_Set = true;
				
			}
		
			"{MultiJumpBoost " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					MultiJumpBoost = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).MultiJumpBoost_Set = true;
				
			}
		
			"{MaxFallSpeed " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					MaxFallSpeed = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).MaxFallSpeed_Set = true;
				
			}
		
			"{DodgeSpeedFactor " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					DodgeSpeedFactor = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).DodgeSpeedFactor_Set = true;
				
			}
		
			"{DodgeSpeedZ " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					DodgeSpeedZ = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).DodgeSpeedZ_Set = true;
				
			}
		
			"{AirControl " {DOUBLE} "}" {
				
						((InitedMessageMessage)actObj).
					AirControl = doubleValue(yytext());
				
					((InitedMessageMessage)actObj).AirControl_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_INITED unprocessed: " + yytext());
		}
  	}
}

<MSG_IUO> {
  	
			"{Name " {STRING} "}" {
				
						((InteractedUsableObject)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((InteractedUsableObject)actObj).
					Location = locationValue(yytext());
				
			}
		
			"{UOEvent " {INT} "}" {
				
						((InteractedUsableObject)actObj).
					UOEvent = intValue(yytext());
				
			}
		
			"{Action " {STRING} "}" {
				
						((InteractedUsableObject)actObj).
					Action = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_IUO unprocessed: " + yytext());
		}
  	}
}

<MSG_INV> {
  	
			"{Id " {UNREALID} "}" {
				
						((ItemMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((ItemMessage)actObj).Id_Set = true;
				
			}
		
			"{NavPointId " {UNREALID} "}" {
				
						((ItemMessage)actObj).
					NavPointId = unrealIdValue(yytext());
				
					((ItemMessage)actObj).NavPointId_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((ItemMessage)actObj).
					Visible = booleanValue(yytext());
				
					((ItemMessage)actObj).Visible_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((ItemMessage)actObj).
					Location = locationValue(yytext());
				
					((ItemMessage)actObj).Location_Set = true;
				
			}
		
			"{Amount " {INT} "}" {
				
						((ItemMessage)actObj).
					Amount = intValue(yytext());
				
					((ItemMessage)actObj).Amount_Set = true;
				
			}
		
			"{Type " {ITEMTYPE} "}" {
				
						((ItemMessage)actObj).
					Type = itemTypeValue(yytext());
				
					((ItemMessage)actObj).Type_Set = true;
				
					((ItemMessage)actObj).Descriptor = itemDescriptorValue(((ItemMessage)actObj).Type);
				
			}
		
			"{Dropped " {BOOLEAN} "}" {
				
						((ItemMessage)actObj).
					Dropped = booleanValue(yytext());
				
					((ItemMessage)actObj).Dropped_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_INV unprocessed: " + yytext());
		}
  	}
}

<MSG_ITC> {
  	
			"{InventoryType " {STRING} "}" {
				
						((ItemCategory)actObj).
					InventoryType = stringValue(yytext());
				
			}
		
			"{PickupType " {ITEMTYPE} "}" {
				
						((ItemCategory)actObj).
					PickupType = itemTypeValue(yytext());
				
			}
		
			"{ItemCategory " {CATEGORY} "}" {
				
						((ItemCategory)actObj).
					ItemCategory = categoryValue(yytext());
				
			}
		
			"{Melee " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					Melee = booleanValue(yytext());
				
			}
		
			"{Sniping " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					Sniping = booleanValue(yytext());
				
			}
		
			"{UsesAltAmmo " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					UsesAltAmmo = booleanValue(yytext());
				
			}
		
			"{PriFireModeType " {STRING} "}" {
				
						((ItemCategory)actObj).
					PriFireModeType = stringValue(yytext());
				
			}
		
			"{PriSplashDamage " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriSplashDamage = booleanValue(yytext());
				
			}
		
			"{PriSplashJump " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriSplashJump = booleanValue(yytext());
				
			}
		
			"{PriRecomSplashDamage " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriRecomSplashDamage = booleanValue(yytext());
				
			}
		
			"{PriTossed " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriTossed = booleanValue(yytext());
				
			}
		
			"{PriLeadTarget " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriLeadTarget = booleanValue(yytext());
				
			}
		
			"{PriInstantHit " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriInstantHit = booleanValue(yytext());
				
			}
		
			"{PriFireOnRelease " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriFireOnRelease = booleanValue(yytext());
				
			}
		
			"{PriWaitForRelease " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriWaitForRelease = booleanValue(yytext());
				
			}
		
			"{PriModeExclusive " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriModeExclusive = booleanValue(yytext());
				
			}
		
			"{PriFireRate " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriFireRate = doubleValue(yytext());
				
			}
		
			"{PriBotRefireRate " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriBotRefireRate = doubleValue(yytext());
				
			}
		
			"{PriAmmoPerFire " {INT} "}" {
				
						((ItemCategory)actObj).
					PriAmmoPerFire = intValue(yytext());
				
			}
		
			"{PriAmmoClipSize " {INT} "}" {
				
						((ItemCategory)actObj).
					PriAmmoClipSize = intValue(yytext());
				
			}
		
			"{PriAimError " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriAimError = doubleValue(yytext());
				
			}
		
			"{PriSpread " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriSpread = doubleValue(yytext());
				
			}
		
			"{PriSpreadStyle " {INT} "}" {
				
						((ItemCategory)actObj).
					PriSpreadStyle = intValue(yytext());
				
			}
		
			"{PriFireCount " {INT} "}" {
				
						((ItemCategory)actObj).
					PriFireCount = intValue(yytext());
				
			}
		
			"{PriDamageAtten " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriDamageAtten = doubleValue(yytext());
				
			}
		
			"{PriAmmoType " {STRING} "}" {
				
						((ItemCategory)actObj).
					PriAmmoType = stringValue(yytext());
				
			}
		
			"{PriInitialAmount " {INT} "}" {
				
						((ItemCategory)actObj).
					PriInitialAmount = intValue(yytext());
				
			}
		
			"{PriMaxAmount " {INT} "}" {
				
						((ItemCategory)actObj).
					PriMaxAmount = intValue(yytext());
				
			}
		
			"{PriMaxRange " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriMaxRange = doubleValue(yytext());
				
			}
		
			"{PriDamageType " {STRING} "}" {
				
						((ItemCategory)actObj).
					PriDamageType = stringValue(yytext());
				
			}
		
			"{PriArmorStops " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriArmorStops = booleanValue(yytext());
				
			}
		
			"{PriAlwaysGibs " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriAlwaysGibs = booleanValue(yytext());
				
			}
		
			"{PriSpecial " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriSpecial = booleanValue(yytext());
				
			}
		
			"{PriDetonatesGoop " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriDetonatesGoop = booleanValue(yytext());
				
			}
		
			"{PriSuperWeapon " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriSuperWeapon = booleanValue(yytext());
				
			}
		
			"{PriExtraMomZ " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					PriExtraMomZ = booleanValue(yytext());
				
			}
		
			"{PriProjType " {STRING} "}" {
				
						((ItemCategory)actObj).
					PriProjType = stringValue(yytext());
				
			}
		
			"{PriDamage " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriDamage = doubleValue(yytext());
				
			}
		
			"{PriDamageMax " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriDamageMax = doubleValue(yytext());
				
			}
		
			"{PriDamageMin " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriDamageMin = doubleValue(yytext());
				
			}
		
			"{PriSpeed " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriSpeed = doubleValue(yytext());
				
			}
		
			"{PriMaxSpeed " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriMaxSpeed = doubleValue(yytext());
				
			}
		
			"{PriLifeSpan " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriLifeSpan = doubleValue(yytext());
				
			}
		
			"{PriDamageRadius " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriDamageRadius = doubleValue(yytext());
				
			}
		
			"{PriTossZ " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriTossZ = doubleValue(yytext());
				
			}
		
			"{PriMaxEffectDistance " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					PriMaxEffectDistance = doubleValue(yytext());
				
			}
		
			"{SecFireModeType " {STRING} "}" {
				
						((ItemCategory)actObj).
					SecFireModeType = stringValue(yytext());
				
			}
		
			"{SecSplashDamage " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecSplashDamage = booleanValue(yytext());
				
			}
		
			"{SecSplashJump " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecSplashJump = booleanValue(yytext());
				
			}
		
			"{SecRecomSplashDamage " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecRecomSplashDamage = booleanValue(yytext());
				
			}
		
			"{SecTossed " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecTossed = booleanValue(yytext());
				
			}
		
			"{SecLeadTarget " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecLeadTarget = booleanValue(yytext());
				
			}
		
			"{SecInstantHit " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecInstantHit = booleanValue(yytext());
				
			}
		
			"{SecFireOnRelease " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecFireOnRelease = booleanValue(yytext());
				
			}
		
			"{SecWaitForRelease " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecWaitForRelease = booleanValue(yytext());
				
			}
		
			"{SecModeExclusive " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecModeExclusive = booleanValue(yytext());
				
			}
		
			"{SecFireRate " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecFireRate = doubleValue(yytext());
				
			}
		
			"{SecBotRefireRate " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecBotRefireRate = doubleValue(yytext());
				
			}
		
			"{SecAmmoPerFire " {INT} "}" {
				
						((ItemCategory)actObj).
					SecAmmoPerFire = intValue(yytext());
				
			}
		
			"{SecAmmoClipSize " {INT} "}" {
				
						((ItemCategory)actObj).
					SecAmmoClipSize = intValue(yytext());
				
			}
		
			"{SecAimError " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecAimError = doubleValue(yytext());
				
			}
		
			"{SecSpread " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecSpread = doubleValue(yytext());
				
			}
		
			"{SecSpreadStyle " {INT} "}" {
				
						((ItemCategory)actObj).
					SecSpreadStyle = intValue(yytext());
				
			}
		
			"{SecFireCount " {INT} "}" {
				
						((ItemCategory)actObj).
					SecFireCount = intValue(yytext());
				
			}
		
			"{SecDamageAtten " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecDamageAtten = doubleValue(yytext());
				
			}
		
			"{SecAmmoType " {STRING} "}" {
				
						((ItemCategory)actObj).
					SecAmmoType = stringValue(yytext());
				
			}
		
			"{SecInitialAmount " {INT} "}" {
				
						((ItemCategory)actObj).
					SecInitialAmount = intValue(yytext());
				
			}
		
			"{SecMaxAmount " {INT} "}" {
				
						((ItemCategory)actObj).
					SecMaxAmount = intValue(yytext());
				
			}
		
			"{SecMaxRange " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecMaxRange = doubleValue(yytext());
				
			}
		
			"{SecDamageType " {STRING} "}" {
				
						((ItemCategory)actObj).
					SecDamageType = stringValue(yytext());
				
			}
		
			"{SecArmorStops " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecArmorStops = booleanValue(yytext());
				
			}
		
			"{SecAlwaysGibs " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecAlwaysGibs = booleanValue(yytext());
				
			}
		
			"{SecSpecial " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecSpecial = booleanValue(yytext());
				
			}
		
			"{SecDetonatesGoop " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecDetonatesGoop = booleanValue(yytext());
				
			}
		
			"{SecSuperWeapon " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecSuperWeapon = booleanValue(yytext());
				
			}
		
			"{SecExtraMomZ " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SecExtraMomZ = booleanValue(yytext());
				
			}
		
			"{SecProjType " {STRING} "}" {
				
						((ItemCategory)actObj).
					SecProjType = stringValue(yytext());
				
			}
		
			"{SecDamage " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecDamage = doubleValue(yytext());
				
			}
		
			"{SecDamageMax " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecDamageMax = doubleValue(yytext());
				
			}
		
			"{SecDamageMin " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecDamageMin = doubleValue(yytext());
				
			}
		
			"{SecSpeed " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecSpeed = doubleValue(yytext());
				
			}
		
			"{SecMaxSpeed " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecMaxSpeed = doubleValue(yytext());
				
			}
		
			"{SecLifeSpan " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecLifeSpan = doubleValue(yytext());
				
			}
		
			"{SecDamageRadius " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecDamageRadius = doubleValue(yytext());
				
			}
		
			"{SecTossZ " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecTossZ = doubleValue(yytext());
				
			}
		
			"{SecMaxEffectDistance " {DOUBLE} "}" {
				
						((ItemCategory)actObj).
					SecMaxEffectDistance = doubleValue(yytext());
				
			}
		
			"{Amount " {INT} "}" {
				
						((ItemCategory)actObj).
					Amount = intValue(yytext());
				
			}
		
			"{SuperHeal " {BOOLEAN} "}" {
				
						((ItemCategory)actObj).
					SuperHeal = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ITC unprocessed: " + yytext());
		}
  	}
}

<MSG_EITC> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EITC unprocessed: " + yytext());
		}
  	}
}

<MSG_SITC> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SITC unprocessed: " + yytext());
		}
  	}
}

<MSG_EINV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EINV unprocessed: " + yytext());
		}
  	}
}

<MSG_SINV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SINV unprocessed: " + yytext());
		}
  	}
}

<MSG_IPK> {
  	
			"{Id " {UNREALID} "}" {
				
						((ItemPickedUp)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{InventoryId " {UNREALID} "}" {
				
						((ItemPickedUp)actObj).
					InventoryId = unrealIdValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((ItemPickedUp)actObj).
					Location = locationValue(yytext());
				
			}
		
			"{Amount " {INT} "}" {
				
						((ItemPickedUp)actObj).
					Amount = intValue(yytext());
				
			}
		
			"{AmountSec " {INT} "}" {
				
						((ItemPickedUp)actObj).
					AmountSec = intValue(yytext());
				
			}
		
			"{Type " {ITEMTYPE} "}" {
				
						((ItemPickedUp)actObj).
					Type = itemTypeValue(yytext());
				
					((ItemPickedUp)actObj).Descriptor = itemDescriptorValue(((ItemPickedUp)actObj).Type);
				
			}
		
			"{Dropped " {BOOLEAN} "}" {
				
						((ItemPickedUp)actObj).
					Dropped = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_IPK unprocessed: " + yytext());
		}
  	}
}

<MSG_IRC> {
  	
			"{Id " {UNREALID} "}" {
				
						((ItemReceived)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{InventoryId " {UNREALID} "}" {
				
						((ItemReceived)actObj).
					InventoryId = unrealIdValue(yytext());
				
			}
		
			"{GiverId " {UNREALID} "}" {
				
						((ItemReceived)actObj).
					GiverId = unrealIdValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((ItemReceived)actObj).
					Location = locationValue(yytext());
				
			}
		
			"{Amount " {INT} "}" {
				
						((ItemReceived)actObj).
					Amount = intValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((ItemReceived)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{Dropped " {BOOLEAN} "}" {
				
						((ItemReceived)actObj).
					Dropped = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_IRC unprocessed: " + yytext());
		}
  	}
}

<MSG_JUMP> {
  	
			"{DoubleJump " {BOOLEAN} "}" {
				
						((JumpPerformed)actObj).
					DoubleJump = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_JUMP unprocessed: " + yytext());
		}
  	}
}

<MSG_KEYEVENT> {
  	
			"{Player " {STRING} "}" {
				
						((KeyEvent)actObj).
					Player = stringValue(yytext());
				
			}
		
			"{PlayerId " {UNREALID} "}" {
				
						((KeyEvent)actObj).
					PlayerId = unrealIdValue(yytext());
				
			}
		
			"{PlayerName " {STRING} "}" {
				
						((KeyEvent)actObj).
					PlayerName = stringValue(yytext());
				
			}
		
			"{ViewTarget " {UNREALID} "}" {
				
						((KeyEvent)actObj).
					ViewTarget = unrealIdValue(yytext());
				
			}
		
			"{Action " {STRING} "}" {
				
						((KeyEvent)actObj).
					Action = stringValue(yytext());
				
			}
		
			"{Key " {STRING} "}" {
				
						((KeyEvent)actObj).
					Key = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_KEYEVENT unprocessed: " + yytext());
		}
  	}
}

<MSG_LAND> {
  	
			"{HitNormal " {VECTOR3D} "}" {
				
						((Landed)actObj).
					HitNormal = vector3dValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_LAND unprocessed: " + yytext());
		}
  	}
}

<MSG_UPD> {
  	
			"{Loc " {LOCATION} "}" {
				
						((LocationUpdate)actObj).
					Loc = locationValue(yytext());
				
			}
		
			"{Vel " {VELOCITY} "}" {
				
						((LocationUpdate)actObj).
					Vel = velocityValue(yytext());
				
			}
		
			"{Rot " {ROTATION} "}" {
				
						((LocationUpdate)actObj).
					Rot = rotationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_UPD unprocessed: " + yytext());
		}
  	}
}

<MSG_LOCKED> {
  	
			"{Id " {UNREALID} "}" {
				
						((LockedVehicle)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Type " {STRING} "}" {
				
						((LockedVehicle)actObj).
					Type = stringValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((LockedVehicle)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_LOCKED unprocessed: " + yytext());
		}
  	}
}

<MSG_LOSTCHILD> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_LOSTCHILD unprocessed: " + yytext());
		}
  	}
}

<MSG_LIN> {
  	
			"{Id " {STRING} "}" {
				
						((LostInventory)actObj).
					Id = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_LIN unprocessed: " + yytext());
		}
  	}
}

<MSG_MAPCHANGE> {
  	
			"{MapName " {STRING} "}" {
				
						((MapChange)actObj).
					MapName = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_MAPCHANGE unprocessed: " + yytext());
		}
  	}
}

<MSG_FIN> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_FIN unprocessed: " + yytext());
		}
  	}
}

<MSG_IMAP> {
  	
			"{Name " {STRING} "}" {
				
						((MapList)actObj).
					Name = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_IMAP unprocessed: " + yytext());
		}
  	}
}

<MSG_EMAP> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EMAP unprocessed: " + yytext());
		}
  	}
}

<MSG_SMAP> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SMAP unprocessed: " + yytext());
		}
  	}
}

<MSG_MOV> {
  	
			"{Id " {UNREALID} "}" {
				
						((MoverMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((MoverMessage)actObj).Id_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((MoverMessage)actObj).
					Location = locationValue(yytext());
				
					((MoverMessage)actObj).Location_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((MoverMessage)actObj).
					Visible = booleanValue(yytext());
				
					((MoverMessage)actObj).Visible_Set = true;
				
			}
		
			"{DamageTrig " {BOOLEAN} "}" {
				
						((MoverMessage)actObj).
					DamageTrig = booleanValue(yytext());
				
					((MoverMessage)actObj).DamageTrig_Set = true;
				
			}
		
			"{Type " {STRING} "}" {
				
						((MoverMessage)actObj).
					Type = stringValue(yytext());
				
					((MoverMessage)actObj).Type_Set = true;
				
			}
		
			"{IsMoving " {BOOLEAN} "}" {
				
						((MoverMessage)actObj).
					IsMoving = booleanValue(yytext());
				
					((MoverMessage)actObj).IsMoving_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((MoverMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((MoverMessage)actObj).Velocity_Set = true;
				
			}
		
			"{MoveTime " {DOUBLE} "}" {
				
						((MoverMessage)actObj).
					MoveTime = doubleValue(yytext());
				
					((MoverMessage)actObj).MoveTime_Set = true;
				
			}
		
			"{OpenTime " {DOUBLE} "}" {
				
						((MoverMessage)actObj).
					OpenTime = doubleValue(yytext());
				
					((MoverMessage)actObj).OpenTime_Set = true;
				
			}
		
			"{BasePos " {LOCATION} "}" {
				
						((MoverMessage)actObj).
					BasePos = locationValue(yytext());
				
					((MoverMessage)actObj).BasePos_Set = true;
				
			}
		
			"{BaseRot " {LOCATION} "}" {
				
						((MoverMessage)actObj).
					BaseRot = locationValue(yytext());
				
					((MoverMessage)actObj).BaseRot_Set = true;
				
			}
		
			"{DelayTime " {DOUBLE} "}" {
				
						((MoverMessage)actObj).
					DelayTime = doubleValue(yytext());
				
					((MoverMessage)actObj).DelayTime_Set = true;
				
			}
		
			"{State " {STRING} "}" {
				
						((MoverMessage)actObj).
					State = stringValue(yytext());
				
					((MoverMessage)actObj).State_Set = true;
				
			}
		
			"{NavPointMarker " {UNREALID} "}" {
				
						((MoverMessage)actObj).
					NavPointMarker = unrealIdValue(yytext());
				
					((MoverMessage)actObj).NavPointMarker_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_MOV unprocessed: " + yytext());
		}
  	}
}

<MSG_EMOV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EMOV unprocessed: " + yytext());
		}
  	}
}

<MSG_SMOV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SMOV unprocessed: " + yytext());
		}
  	}
}

<MSG_MUT> {
  	
			"{Id " {UNREALID} "}" {
				
						((Mutator)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Name " {STRING} "}" {
				
						((Mutator)actObj).
					Name = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_MUT unprocessed: " + yytext());
		}
  	}
}

<MSG_EMUT> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EMUT unprocessed: " + yytext());
		}
  	}
}

<MSG_SMUT> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SMUT unprocessed: " + yytext());
		}
  	}
}

<MSG_MYINV> {
  	
			"{Id " {UNREALID} "}" {
				
						((MyInventoryMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((MyInventoryMessage)actObj).Id_Set = true;
				
			}
		
			"{CurrentAmmo " {INT} "}" {
				
						((MyInventoryMessage)actObj).
					CurrentAmmo = intValue(yytext());
				
					((MyInventoryMessage)actObj).CurrentAmmo_Set = true;
				
			}
		
			"{CurrentAltAmmo " {INT} "}" {
				
						((MyInventoryMessage)actObj).
					CurrentAltAmmo = intValue(yytext());
				
					((MyInventoryMessage)actObj).CurrentAltAmmo_Set = true;
				
			}
		
			"{Amount " {INT} "}" {
				
						((MyInventoryMessage)actObj).
					Amount = intValue(yytext());
				
					((MyInventoryMessage)actObj).Amount_Set = true;
				
			}
		
			"{Type " {ITEMTYPE} "}" {
				
						((MyInventoryMessage)actObj).
					Type = itemTypeValue(yytext());
				
					((MyInventoryMessage)actObj).Type_Set = true;
				
				((MyInventoryMessage)actObj).Descriptor = itemDescriptorValue(((MyInventoryMessage)actObj).Type);
			
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_MYINV unprocessed: " + yytext());
		}
  	}
}

<MSG_EMYINV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EMYINV unprocessed: " + yytext());
		}
  	}
}

<MSG_SMYINV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SMYINV unprocessed: " + yytext());
		}
  	}
}

<MSG_NAV> {
  	
			"{Id " {UNREALID} "}" {
				
						((NavPointMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((NavPointMessage)actObj).Id_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((NavPointMessage)actObj).
					Location = locationValue(yytext());
				
					((NavPointMessage)actObj).Location_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((NavPointMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((NavPointMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					Visible = booleanValue(yytext());
				
					((NavPointMessage)actObj).Visible_Set = true;
				
			}
		
			"{Item " {UNREALID} "}" {
				
						((NavPointMessage)actObj).
					Item = unrealIdValue(yytext());
				
					((NavPointMessage)actObj).Item_Set = true;
				
			}
		
			"{ItemClass " {ITEMTYPE} "}" {
				
						((NavPointMessage)actObj).
					ItemClass = itemTypeValue(yytext());
				
					((NavPointMessage)actObj).ItemClass_Set = true;
				
			}
		
			"{ItemSpawned " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					ItemSpawned = booleanValue(yytext());
				
					((NavPointMessage)actObj).ItemSpawned_Set = true;
				
			}
		
			"{DoorOpened " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					DoorOpened = booleanValue(yytext());
				
					((NavPointMessage)actObj).DoorOpened_Set = true;
				
			}
		
			"{Mover " {UNREALID} "}" {
				
						((NavPointMessage)actObj).
					Mover = unrealIdValue(yytext());
				
					((NavPointMessage)actObj).Mover_Set = true;
				
			}
		
			"{LiftOffset " {VECTOR3D} "}" {
				
						((NavPointMessage)actObj).
					LiftOffset = vector3dValue(yytext());
				
					((NavPointMessage)actObj).LiftOffset_Set = true;
				
			}
		
			"{LiftJumpExit " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					LiftJumpExit = booleanValue(yytext());
				
					((NavPointMessage)actObj).LiftJumpExit_Set = true;
				
			}
		
			"{NoDoubleJump " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					NoDoubleJump = booleanValue(yytext());
				
					((NavPointMessage)actObj).NoDoubleJump_Set = true;
				
			}
		
			"{InvSpot " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					InvSpot = booleanValue(yytext());
				
					((NavPointMessage)actObj).InvSpot_Set = true;
				
			}
		
			"{PlayerStart " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					PlayerStart = booleanValue(yytext());
				
					((NavPointMessage)actObj).PlayerStart_Set = true;
				
			}
		
			"{TeamNumber " {INT} "}" {
				
						((NavPointMessage)actObj).
					TeamNumber = intValue(yytext());
				
					((NavPointMessage)actObj).TeamNumber_Set = true;
				
			}
		
			"{DomPoint " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					DomPoint = booleanValue(yytext());
				
					((NavPointMessage)actObj).DomPoint_Set = true;
				
			}
		
			"{DomPointController " {INT} "}" {
				
						((NavPointMessage)actObj).
					DomPointController = intValue(yytext());
				
					((NavPointMessage)actObj).DomPointController_Set = true;
				
			}
		
			"{Door " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					Door = booleanValue(yytext());
				
					((NavPointMessage)actObj).Door_Set = true;
				
			}
		
			"{LiftCenter " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					LiftCenter = booleanValue(yytext());
				
					((NavPointMessage)actObj).LiftCenter_Set = true;
				
			}
		
			"{LiftExit " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					LiftExit = booleanValue(yytext());
				
					((NavPointMessage)actObj).LiftExit_Set = true;
				
			}
		
			"{AIMarker " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					AIMarker = booleanValue(yytext());
				
					((NavPointMessage)actObj).AIMarker_Set = true;
				
			}
		
			"{JumpSpot " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					JumpSpot = booleanValue(yytext());
				
					((NavPointMessage)actObj).JumpSpot_Set = true;
				
			}
		
			"{JumpPad " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					JumpPad = booleanValue(yytext());
				
					((NavPointMessage)actObj).JumpPad_Set = true;
				
			}
		
			"{JumpDest " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					JumpDest = booleanValue(yytext());
				
					((NavPointMessage)actObj).JumpDest_Set = true;
				
			}
		
			"{Teleporter " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					Teleporter = booleanValue(yytext());
				
					((NavPointMessage)actObj).Teleporter_Set = true;
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((NavPointMessage)actObj).
					Rotation = rotationValue(yytext());
				
					((NavPointMessage)actObj).Rotation_Set = true;
				
			}
		
			"{RoamingSpot " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					RoamingSpot = booleanValue(yytext());
				
					((NavPointMessage)actObj).RoamingSpot_Set = true;
				
			}
		
			"{SnipingSpot " {BOOLEAN} "}" {
				
						((NavPointMessage)actObj).
					SnipingSpot = booleanValue(yytext());
				
					((NavPointMessage)actObj).SnipingSpot_Set = true;
				
			}
		
			"{PreferedWeapon " {STRING} "}" {
				
						((NavPointMessage)actObj).
					PreferedWeapon = stringValue(yytext());
				
					((NavPointMessage)actObj).PreferedWeapon_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_NAV unprocessed: " + yytext());
		}
  	}
}

<MSG_ENAV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ENAV unprocessed: " + yytext());
		}
  	}
}

<MSG_SNAV> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SNAV unprocessed: " + yytext());
		}
  	}
}

<MSG_INGP> {
  	
			"{Id " {UNREALID} "}" {
				
						((NavPointNeighbourLink)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Flags " {INT} "}" {
				
						((NavPointNeighbourLink)actObj).
					Flags = intValue(yytext());
				
			}
		
			"{CollisionR " {INT} "}" {
				
						((NavPointNeighbourLink)actObj).
					CollisionR = intValue(yytext());
				
			}
		
			"{CollisionH " {INT} "}" {
				
						((NavPointNeighbourLink)actObj).
					CollisionH = intValue(yytext());
				
			}
		
			"{TranslocZOffset " {DOUBLE} "}" {
				
						((NavPointNeighbourLink)actObj).
					TranslocZOffset = doubleValue(yytext());
				
			}
		
			"{TranslocTargetTag " {STRING} "}" {
				
						((NavPointNeighbourLink)actObj).
					TranslocTargetTag = stringValue(yytext());
				
			}
		
			"{OnlyTranslocator " {BOOLEAN} "}" {
				
						((NavPointNeighbourLink)actObj).
					OnlyTranslocator = booleanValue(yytext());
				
			}
		
			"{ForceDoubleJump " {BOOLEAN} "}" {
				
						((NavPointNeighbourLink)actObj).
					ForceDoubleJump = booleanValue(yytext());
				
			}
		
			"{NeededJump " {VECTOR3D} "}" {
				
						((NavPointNeighbourLink)actObj).
					NeededJump = vector3dValue(yytext());
				
			}
		
			"{NeverImpactJump " {BOOLEAN} "}" {
				
						((NavPointNeighbourLink)actObj).
					NeverImpactJump = booleanValue(yytext());
				
			}
		
			"{NoLowGrav " {BOOLEAN} "}" {
				
						((NavPointNeighbourLink)actObj).
					NoLowGrav = booleanValue(yytext());
				
			}
		
			"{CalculatedGravityZ " {DOUBLE} "}" {
				
						((NavPointNeighbourLink)actObj).
					CalculatedGravityZ = doubleValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_INGP unprocessed: " + yytext());
		}
  	}
}

<MSG_ENGP> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ENGP unprocessed: " + yytext());
		}
  	}
}

<MSG_SNGP> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SNGP unprocessed: " + yytext());
		}
  	}
}

<MSG_SEL> {
  	
			"{PlayerId " {UNREALID} "}" {
				
						((ObjectSelected)actObj).
					PlayerId = unrealIdValue(yytext());
				
			}
		
			"{PlayerName " {STRING} "}" {
				
						((ObjectSelected)actObj).
					PlayerName = stringValue(yytext());
				
			}
		
			"{ObjectId " {UNREALID} "}" {
				
						((ObjectSelected)actObj).
					ObjectId = unrealIdValue(yytext());
				
			}
		
			"{ObjectLocation " {LOCATION} "}" {
				
						((ObjectSelected)actObj).
					ObjectLocation = locationValue(yytext());
				
			}
		
			"{ObjectHitLocation " {LOCATION} "}" {
				
						((ObjectSelected)actObj).
					ObjectHitLocation = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SEL unprocessed: " + yytext());
		}
  	}
}

<MSG_PASSWDOK> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PASSWDOK unprocessed: " + yytext());
		}
  	}
}

<MSG_PASSWDWRONG> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PASSWDWRONG unprocessed: " + yytext());
		}
  	}
}

<MSG_PASSWORD> {
  	
			"{BlockedByIp " {STRING} "}" {
				
						((Password)actObj).
					BlockedByIp = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PASSWORD unprocessed: " + yytext());
		}
  	}
}

<MSG_IPTH> {
  	
			"{RouteId " {UNREALID} "}" {
				
						((PathList)actObj).
					RouteId = unrealIdValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((PathList)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_IPTH unprocessed: " + yytext());
		}
  	}
}

<MSG_EPTH> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EPTH unprocessed: " + yytext());
		}
  	}
}

<MSG_SPTH> {
  	
			"{MessageId " {STRING} "}" {
				
						((PathListStart)actObj).
					MessageId = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SPTH unprocessed: " + yytext());
		}
  	}
}

<MSG_PUO> {
  	
			"{Name " {STRING} "}" {
				
						((PickedUsableObject)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((PickedUsableObject)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PUO unprocessed: " + yytext());
		}
  	}
}

<MSG_PLR> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((PlayerMessage)actObj).Id_Set = true;
				
			}
		
			"{Jmx " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Jmx = stringValue(yytext());
				
					((PlayerMessage)actObj).Jmx_Set = true;
				
			}
		
			"{Name " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Name = stringValue(yytext());
				
					((PlayerMessage)actObj).Name_Set = true;
				
			}
		
			"{Spectator " {BOOLEAN} "}" {
				
						((PlayerMessage)actObj).
					Spectator = booleanValue(yytext());
				
					((PlayerMessage)actObj).Spectator_Set = true;
				
			}
		
			"{Action " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Action = stringValue(yytext());
				
					((PlayerMessage)actObj).Action_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((PlayerMessage)actObj).
					Visible = booleanValue(yytext());
				
					((PlayerMessage)actObj).Visible_Set = true;
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((PlayerMessage)actObj).
					Rotation = rotationValue(yytext());
				
					((PlayerMessage)actObj).Rotation_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((PlayerMessage)actObj).
					Location = locationValue(yytext());
				
					((PlayerMessage)actObj).Location_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((PlayerMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((PlayerMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Team " {INT} "}" {
				
						((PlayerMessage)actObj).
					Team = intValue(yytext());
				
					((PlayerMessage)actObj).Team_Set = true;
				
			}
		
			"{Weapon " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Weapon = stringValue(yytext());
				
					((PlayerMessage)actObj).Weapon_Set = true;
				
			}
		
			"{Crouched " {BOOLEAN} "}" {
				
						((PlayerMessage)actObj).
					Crouched = booleanValue(yytext());
				
					((PlayerMessage)actObj).Crouched_Set = true;
				
			}
		
			"{Firing " {INT} "}" {
				
						((PlayerMessage)actObj).
					Firing = intValue(yytext());
				
					((PlayerMessage)actObj).Firing_Set = true;
				
			}
		
			"{EmotLeft " {STRING} "}" {
				
						((PlayerMessage)actObj).
					EmotLeft = stringValue(yytext());
				
					((PlayerMessage)actObj).EmotLeft_Set = true;
				
			}
		
			"{EmotCenter " {STRING} "}" {
				
						((PlayerMessage)actObj).
					EmotCenter = stringValue(yytext());
				
					((PlayerMessage)actObj).EmotCenter_Set = true;
				
			}
		
			"{EmotRight " {STRING} "}" {
				
						((PlayerMessage)actObj).
					EmotRight = stringValue(yytext());
				
					((PlayerMessage)actObj).EmotRight_Set = true;
				
			}
		
			"{Bubble " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Bubble = stringValue(yytext());
				
					((PlayerMessage)actObj).Bubble_Set = true;
				
			}
		
			"{Anim " {STRING} "}" {
				
						((PlayerMessage)actObj).
					Anim = stringValue(yytext());
				
					((PlayerMessage)actObj).Anim_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PLR unprocessed: " + yytext());
		}
  	}
}

<MSG_HIT> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerDamaged)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Damage " {INT} "}" {
				
						((PlayerDamaged)actObj).
					Damage = intValue(yytext());
				
			}
		
			"{DamageType " {STRING} "}" {
				
						((PlayerDamaged)actObj).
					DamageType = stringValue(yytext());
				
			}
		
			"{WeaponName " {STRING} "}" {
				
						((PlayerDamaged)actObj).
					WeaponName = stringValue(yytext());
				
			}
		
			"{Flaming " {BOOLEAN} "}" {
				
						((PlayerDamaged)actObj).
					Flaming = booleanValue(yytext());
				
			}
		
			"{DirectDamage " {BOOLEAN} "}" {
				
						((PlayerDamaged)actObj).
					DirectDamage = booleanValue(yytext());
				
			}
		
			"{BulletHit " {BOOLEAN} "}" {
				
						((PlayerDamaged)actObj).
					BulletHit = booleanValue(yytext());
				
			}
		
			"{VehicleHit " {BOOLEAN} "}" {
				
						((PlayerDamaged)actObj).
					VehicleHit = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_HIT unprocessed: " + yytext());
		}
  	}
}

<MSG_PLI> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerInput)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{DialogId " {STRING} "}" {
				
						((PlayerInput)actObj).
					DialogId = stringValue(yytext());
				
			}
		
			"{Key " {INT} "}" {
				
						((PlayerInput)actObj).
					Key = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PLI unprocessed: " + yytext());
		}
  	}
}

<MSG_JOIN> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerJoinsGame)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Name " {STRING} "}" {
				
						((PlayerJoinsGame)actObj).
					Name = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_JOIN unprocessed: " + yytext());
		}
  	}
}

<MSG_KIL> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerKilled)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Killer " {UNREALID} "}" {
				
						((PlayerKilled)actObj).
					Killer = unrealIdValue(yytext());
				
			}
		
			"{KilledPawn " {STRING} "}" {
				
						((PlayerKilled)actObj).
					KilledPawn = stringValue(yytext());
				
			}
		
			"{DamageType " {STRING} "}" {
				
						((PlayerKilled)actObj).
					DamageType = stringValue(yytext());
				
			}
		
			"{DeathString " {STRING} "}" {
				
						((PlayerKilled)actObj).
					DeathString = stringValue(yytext());
				
			}
		
			"{WeaponName " {STRING} "}" {
				
						((PlayerKilled)actObj).
					WeaponName = stringValue(yytext());
				
			}
		
			"{Flaming " {BOOLEAN} "}" {
				
						((PlayerKilled)actObj).
					Flaming = booleanValue(yytext());
				
			}
		
			"{CausedByWorld " {BOOLEAN} "}" {
				
						((PlayerKilled)actObj).
					CausedByWorld = booleanValue(yytext());
				
			}
		
			"{DirectDamage " {BOOLEAN} "}" {
				
						((PlayerKilled)actObj).
					DirectDamage = booleanValue(yytext());
				
			}
		
			"{BulletHit " {BOOLEAN} "}" {
				
						((PlayerKilled)actObj).
					BulletHit = booleanValue(yytext());
				
			}
		
			"{VehicleHit " {BOOLEAN} "}" {
				
						((PlayerKilled)actObj).
					VehicleHit = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_KIL unprocessed: " + yytext());
		}
  	}
}

<MSG_LEFT> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerLeft)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Name " {STRING} "}" {
				
						((PlayerLeft)actObj).
					Name = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_LEFT unprocessed: " + yytext());
		}
  	}
}

<MSG_EPLR> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_EPLR unprocessed: " + yytext());
		}
  	}
}

<MSG_SPLR> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SPLR unprocessed: " + yytext());
		}
  	}
}

<MSG_PLS> {
  	
			"{Id " {UNREALID} "}" {
				
						((PlayerScore)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Score " {INT} "}" {
				
						((PlayerScore)actObj).
					Score = intValue(yytext());
				
			}
		
			"{Deaths " {INT} "}" {
				
						((PlayerScore)actObj).
					Deaths = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PLS unprocessed: " + yytext());
		}
  	}
}

<MSG_PONG> {
  	
			"{Time " {DOUBLE} "}" {
				
						((Pong)actObj).
					Time = doubleValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_PONG unprocessed: " + yytext());
		}
  	}
}

<MSG_RCH> {
  	
			"{Id " {STRING} "}" {
				
						((Reachable)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{Reachable " {BOOLEAN} "}" {
				
						((Reachable)actObj).
					Reachable = booleanValue(yytext());
				
			}
		
			"{From " {LOCATION} "}" {
				
						((Reachable)actObj).
					From = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_RCH unprocessed: " + yytext());
		}
  	}
}

<MSG_RECEND> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_RECEND unprocessed: " + yytext());
		}
  	}
}

<MSG_RECSTART> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_RECSTART unprocessed: " + yytext());
		}
  	}
}

<MSG_SLF> {
  	
			"{Id " {UNREALID} "}" {
				
						((SelfMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((SelfMessage)actObj).Id_Set = true;
				
			}
		
			"{BotId " {UNREALID} "}" {
				
						((SelfMessage)actObj).
					BotId = unrealIdValue(yytext());
				
					((SelfMessage)actObj).BotId_Set = true;
				
			}
		
			"{Name " {STRING} "}" {
				
						((SelfMessage)actObj).
					Name = stringValue(yytext());
				
					((SelfMessage)actObj).Name_Set = true;
				
			}
		
			"{Vehicle " {BOOLEAN} "}" {
				
						((SelfMessage)actObj).
					Vehicle = booleanValue(yytext());
				
					((SelfMessage)actObj).Vehicle_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((SelfMessage)actObj).
					Location = locationValue(yytext());
				
					((SelfMessage)actObj).Location_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((SelfMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((SelfMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((SelfMessage)actObj).
					Rotation = rotationValue(yytext());
				
					((SelfMessage)actObj).Rotation_Set = true;
				
			}
		
			"{Team " {INT} "}" {
				
						((SelfMessage)actObj).
					Team = intValue(yytext());
				
					((SelfMessage)actObj).Team_Set = true;
				
			}
		
			"{Weapon " {STRING} "}" {
				
						((SelfMessage)actObj).
					Weapon = stringValue(yytext());
				
					((SelfMessage)actObj).Weapon_Set = true;
				
			}
		
			"{Shooting " {BOOLEAN} "}" {
				
						((SelfMessage)actObj).
					Shooting = booleanValue(yytext());
				
					((SelfMessage)actObj).Shooting_Set = true;
				
			}
		
			"{Health " {INT} "}" {
				
						((SelfMessage)actObj).
					Health = intValue(yytext());
				
					((SelfMessage)actObj).Health_Set = true;
				
			}
		
			"{PrimaryAmmo " {INT} "}" {
				
						((SelfMessage)actObj).
					PrimaryAmmo = intValue(yytext());
				
					((SelfMessage)actObj).PrimaryAmmo_Set = true;
				
			}
		
			"{SecondaryAmmo " {INT} "}" {
				
						((SelfMessage)actObj).
					SecondaryAmmo = intValue(yytext());
				
					((SelfMessage)actObj).SecondaryAmmo_Set = true;
				
			}
		
			"{Adrenaline " {INT} "}" {
				
						((SelfMessage)actObj).
					Adrenaline = intValue(yytext());
				
					((SelfMessage)actObj).Adrenaline_Set = true;
				
			}
		
			"{Armor " {INT} "}" {
				
						((SelfMessage)actObj).
					Armor = intValue(yytext());
				
					((SelfMessage)actObj).Armor_Set = true;
				
			}
		
			"{SmallArmor " {INT} "}" {
				
						((SelfMessage)actObj).
					SmallArmor = intValue(yytext());
				
					((SelfMessage)actObj).SmallArmor_Set = true;
				
			}
		
			"{AltFiring " {BOOLEAN} "}" {
				
						((SelfMessage)actObj).
					AltFiring = booleanValue(yytext());
				
					((SelfMessage)actObj).AltFiring_Set = true;
				
			}
		
			"{Crouched " {BOOLEAN} "}" {
				
						((SelfMessage)actObj).
					Crouched = booleanValue(yytext());
				
					((SelfMessage)actObj).Crouched_Set = true;
				
			}
		
			"{Walking " {BOOLEAN} "}" {
				
						((SelfMessage)actObj).
					Walking = booleanValue(yytext());
				
					((SelfMessage)actObj).Walking_Set = true;
				
			}
		
			"{FloorLocation " {LOCATION} "}" {
				
						((SelfMessage)actObj).
					FloorLocation = locationValue(yytext());
				
					((SelfMessage)actObj).FloorLocation_Set = true;
				
			}
		
			"{FloorNormal " {LOCATION} "}" {
				
						((SelfMessage)actObj).
					FloorNormal = locationValue(yytext());
				
					((SelfMessage)actObj).FloorNormal_Set = true;
				
			}
		
			"{Combo " {STRING} "}" {
				
						((SelfMessage)actObj).
					Combo = stringValue(yytext());
				
					((SelfMessage)actObj).Combo_Set = true;
				
			}
		
			"{UDamageTime " {DOUBLE} "}" {
				
						((SelfMessage)actObj).
					UDamageTime = doubleValue(yytext());
				
					((SelfMessage)actObj).UDamageTime_Set = true;
				
			}
		
			"{Action " {STRING} "}" {
				
						((SelfMessage)actObj).
					Action = stringValue(yytext());
				
					((SelfMessage)actObj).Action_Set = true;
				
			}
		
			"{EmotLeft " {STRING} "}" {
				
						((SelfMessage)actObj).
					EmotLeft = stringValue(yytext());
				
					((SelfMessage)actObj).EmotLeft_Set = true;
				
			}
		
			"{EmotCenter " {STRING} "}" {
				
						((SelfMessage)actObj).
					EmotCenter = stringValue(yytext());
				
					((SelfMessage)actObj).EmotCenter_Set = true;
				
			}
		
			"{EmotRight " {STRING} "}" {
				
						((SelfMessage)actObj).
					EmotRight = stringValue(yytext());
				
					((SelfMessage)actObj).EmotRight_Set = true;
				
			}
		
			"{Bubble " {STRING} "}" {
				
						((SelfMessage)actObj).
					Bubble = stringValue(yytext());
				
					((SelfMessage)actObj).Bubble_Set = true;
				
			}
		
			"{Anim " {STRING} "}" {
				
						((SelfMessage)actObj).
					Anim = stringValue(yytext());
				
					((SelfMessage)actObj).Anim_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SLF unprocessed: " + yytext());
		}
  	}
}

<MSG_SHOOT> {
  	
			"{Alt " {BOOLEAN} "}" {
				
						((ShootingStarted)actObj).
					Alt = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SHOOT unprocessed: " + yytext());
		}
  	}
}

<MSG_STOPSHOOT> {
  	
			"{Alt " {BOOLEAN} "}" {
				
						((ShootingStopped)actObj).
					Alt = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_STOPSHOOT unprocessed: " + yytext());
		}
  	}
}

<MSG_SPW> {
  	
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SPW unprocessed: " + yytext());
		}
  	}
}

<MSG_SUO> {
  	
			"{Name " {STRING} "}" {
				
						((SpawnedUsableObject)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((SpawnedUsableObject)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_SUO unprocessed: " + yytext());
		}
  	}
}

<MSG_TEAMCHANGE> {
  	
			"{Id " {UNREALID} "}" {
				
						((TeamChanged)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Success " {BOOLEAN} "}" {
				
						((TeamChanged)actObj).
					Success = booleanValue(yytext());
				
			}
		
			"{DesiredTeam " {INT} "}" {
				
						((TeamChanged)actObj).
					DesiredTeam = intValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_TEAMCHANGE unprocessed: " + yytext());
		}
  	}
}

<MSG_VMT> {
  	
			"{Id " {UNREALID} "}" {
				
						((TeamChat)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{Name " {STRING} "}" {
				
						((TeamChat)actObj).
					Name = stringValue(yytext());
				
			}
		
			"{ControlServer " {BOOLEAN} "}" {
				
						((TeamChat)actObj).
					ControlServer = booleanValue(yytext());
				
			}
		
			"{Text " {STRING} "}" {
				
						((TeamChat)actObj).
					Text = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_VMT unprocessed: " + yytext());
		}
  	}
}

<MSG_TES> {
  	
			"{Id " {UNREALID} "}" {
				
						((TeamScoreMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((TeamScoreMessage)actObj).Id_Set = true;
				
			}
		
			"{Team " {INTEGER} "}" {
				
						((TeamScoreMessage)actObj).
					Team = integerValue(yytext());
				
					((TeamScoreMessage)actObj).Team_Set = true;
				
			}
		
			"{Score " {INTEGER} "}" {
				
						((TeamScoreMessage)actObj).
					Score = integerValue(yytext());
				
					((TeamScoreMessage)actObj).Score_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_TES unprocessed: " + yytext());
		}
  	}
}

<MSG_THROWN> {
  	
			"{Id " {UNREALID} "}" {
				
						((Thrown)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_THROWN unprocessed: " + yytext());
		}
  	}
}

<MSG_TRC> {
  	
			"{Id " {STRING} "}" {
				
						((TraceResponse)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{From " {LOCATION} "}" {
				
						((TraceResponse)actObj).
					From = locationValue(yytext());
				
			}
		
			"{To " {LOCATION} "}" {
				
						((TraceResponse)actObj).
					To = locationValue(yytext());
				
			}
		
			"{Result " {BOOLEAN} "}" {
				
						((TraceResponse)actObj).
					Result = booleanValue(yytext());
				
			}
		
			"{HitNormal " {VECTOR3D} "}" {
				
						((TraceResponse)actObj).
					HitNormal = vector3dValue(yytext());
				
			}
		
			"{HitLocation " {VECTOR3D} "}" {
				
						((TraceResponse)actObj).
					HitLocation = vector3dValue(yytext());
				
			}
		
			"{HitID " {UNREALID} "}" {
				
						((TraceResponse)actObj).
					HitID = unrealIdValue(yytext());
				
			}
		
			"{TraceActors " {BOOLEAN} "}" {
				
						((TraceResponse)actObj).
					TraceActors = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_TRC unprocessed: " + yytext());
		}
  	}
}

<MSG_TRG> {
  	
			"{Actor " {STRING} "}" {
				
						((Trigger)actObj).
					Actor = stringValue(yytext());
				
			}
		
			"{EventInstigator " {UNREALID} "}" {
				
						((Trigger)actObj).
					EventInstigator = unrealIdValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_TRG unprocessed: " + yytext());
		}
  	}
}

<MSG_VEH> {
  	
			"{Id " {UNREALID} "}" {
				
						((VehicleMessage)actObj).
					Id = unrealIdValue(yytext());
				
					((VehicleMessage)actObj).Id_Set = true;
				
			}
		
			"{Rotation " {ROTATION} "}" {
				
						((VehicleMessage)actObj).
					Rotation = rotationValue(yytext());
				
					((VehicleMessage)actObj).Rotation_Set = true;
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((VehicleMessage)actObj).
					Location = locationValue(yytext());
				
					((VehicleMessage)actObj).Location_Set = true;
				
			}
		
			"{Velocity " {VELOCITY} "}" {
				
						((VehicleMessage)actObj).
					Velocity = velocityValue(yytext());
				
					((VehicleMessage)actObj).Velocity_Set = true;
				
			}
		
			"{Visible " {BOOLEAN} "}" {
				
						((VehicleMessage)actObj).
					Visible = booleanValue(yytext());
				
					((VehicleMessage)actObj).Visible_Set = true;
				
			}
		
			"{Team " {INTEGER} "}" {
				
						((VehicleMessage)actObj).
					Team = integerValue(yytext());
				
					((VehicleMessage)actObj).Team_Set = true;
				
			}
		
			"{Health " {INTEGER} "}" {
				
						((VehicleMessage)actObj).
					Health = integerValue(yytext());
				
					((VehicleMessage)actObj).Health_Set = true;
				
			}
		
			"{Armor " {INTEGER} "}" {
				
						((VehicleMessage)actObj).
					Armor = integerValue(yytext());
				
					((VehicleMessage)actObj).Armor_Set = true;
				
			}
		
			"{Driver " {UNREALID} "}" {
				
						((VehicleMessage)actObj).
					Driver = unrealIdValue(yytext());
				
					((VehicleMessage)actObj).Driver_Set = true;
				
			}
		
			"{TeamLocked " {BOOLEAN} "}" {
				
						((VehicleMessage)actObj).
					TeamLocked = booleanValue(yytext());
				
					((VehicleMessage)actObj).TeamLocked_Set = true;
				
			}
		
			"{Type " {STRING} "}" {
				
						((VehicleMessage)actObj).
					Type = stringValue(yytext());
				
					((VehicleMessage)actObj).Type_Set = true;
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_VEH unprocessed: " + yytext());
		}
  	}
}

<MSG_VCH> {
  	
			"{Id " {STRING} "}" {
				
						((VolumeChanged)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{ZoneVelocity " {VELOCITY} "}" {
				
						((VolumeChanged)actObj).
					ZoneVelocity = velocityValue(yytext());
				
			}
		
			"{ZoneGravity " {VELOCITY} "}" {
				
						((VolumeChanged)actObj).
					ZoneGravity = velocityValue(yytext());
				
			}
		
			"{GroundFriction " {DOUBLE} "}" {
				
						((VolumeChanged)actObj).
					GroundFriction = doubleValue(yytext());
				
			}
		
			"{FluidFriction " {DOUBLE} "}" {
				
						((VolumeChanged)actObj).
					FluidFriction = doubleValue(yytext());
				
			}
		
			"{TerminalVelocity " {DOUBLE} "}" {
				
						((VolumeChanged)actObj).
					TerminalVelocity = doubleValue(yytext());
				
			}
		
			"{WaterVolume " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					WaterVolume = booleanValue(yytext());
				
			}
		
			"{PainCausing " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					PainCausing = booleanValue(yytext());
				
			}
		
			"{Destructive " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					Destructive = booleanValue(yytext());
				
			}
		
			"{DamagePerSec " {DOUBLE} "}" {
				
						((VolumeChanged)actObj).
					DamagePerSec = doubleValue(yytext());
				
			}
		
			"{DamageType " {STRING} "}" {
				
						((VolumeChanged)actObj).
					DamageType = stringValue(yytext());
				
			}
		
			"{NoInventory " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					NoInventory = booleanValue(yytext());
				
			}
		
			"{MoveProjectiles " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					MoveProjectiles = booleanValue(yytext());
				
			}
		
			"{NeutralZone " {BOOLEAN} "}" {
				
						((VolumeChanged)actObj).
					NeutralZone = booleanValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_VCH unprocessed: " + yytext());
		}
  	}
}

<MSG_WAL> {
  	
			"{Id " {STRING} "}" {
				
						((WallCollision)actObj).
					Id = stringValue(yytext());
				
			}
		
			"{Normal " {VECTOR3D} "}" {
				
						((WallCollision)actObj).
					Normal = vector3dValue(yytext());
				
			}
		
			"{Location " {LOCATION} "}" {
				
						((WallCollision)actObj).
					Location = locationValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_WAL unprocessed: " + yytext());
		}
  	}
}

<MSG_WUP> {
  	
			"{Id " {UNREALID} "}" {
				
						((WeaponUpdate)actObj).
					Id = unrealIdValue(yytext());
				
			}
		
			"{PrimaryAmmo " {INT} "}" {
				
						((WeaponUpdate)actObj).
					PrimaryAmmo = intValue(yytext());
				
			}
		
			"{SecondaryAmmo " {INT} "}" {
				
						((WeaponUpdate)actObj).
					SecondaryAmmo = intValue(yytext());
				
			}
		
			"{InventoryType " {STRING} "}" {
				
						((WeaponUpdate)actObj).
					InventoryType = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_WUP unprocessed: " + yytext());
		}
  	}
}

<MSG_ZCB> {
  	
			"{Id " {STRING} "}" {
				
						((ZoneChangedBot)actObj).
					Id = stringValue(yytext());
				
			}
		
  	
	. {
		if (!yytext().equals(" ")) {
			warning("State MSG_ZCB unprocessed: " + yytext());
		}
  	}
}




{WHITE_SPACE_CHAR} { }

{NEWLINE} { 
		// reset scanning
		stack_pos = 0;
 		yybegin(YYINITIAL);
 		if (actObj != null)
 		{ 			
 			InfoMessage obj = (InfoMessage) actObj;
 			
 			if (obj instanceof IWorldObjectUpdatedEvent) {
 				setTeamId((IWorldObjectUpdatedEvent)obj);
 			}
 			
 			if (obj instanceof BeginMessage) {
                ut2004Time = ((BeginMessage)obj).getTime();
                setTime((IWorldEvent)obj, ut2004Time);
            } else
            if (obj instanceof AliveMessage) {
                ut2004Time = ((AliveMessage)obj).getTime();
                setTime((IWorldObjectUpdatedEvent)obj, ut2004Time);
            } else
            if (obj instanceof IWorldObjectUpdatedEvent) {
 				setTime((IWorldObjectUpdatedEvent)obj, ut2004Time);
 			} else
 			if (obj instanceof IWorldEvent) {
 				setTime((IWorldEvent)obj, ut2004Time);
 			}
 			
 			actObj = null;
 			return obj;
 		}
}

<UNPROCESSED_MESSAGE> {
    "{" {STRINGID} " " {STRING} "}" {
        String text = yytext();
        if(!tryParsingUnprocessedMessageParameter(getToken(text,0), text)) {
            warning("Illegal unprocessed message parameter: <" + yytext() + ">");  
        }
    }
    . {
            if (!yytext().equals(" ")) {
                    warning("State UNPROCESSED_MESSAGE unprocessed: " + yytext());
            }
    }
    
}

{MESSAGENAME}* {
  InfoMessage obj = tryParsingUnprocessedMessage(yytext());
  if(obj != null){
    actObj = obj;
    state_go(UNPROCESSED_MESSAGE);
  } else {
    warning("Illegal character sequence: <" + yytext() + "> + currentstate "+ yystate());  
  }
}

. {
  warning("Illegal character: <" + yytext() + "> + currentstate "+ yystate());
}



