
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command SETSENDKEYS.
 		 *
 		 * 
		Sets whether all key (not mouse) events should be sent through the KEYEVENT message.
	
         */
 	public class SetSendKeys 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {PlayerId unreal_id}  {Player text}  {Send False} ";
    
		/**
		 * Creates new instance of command SetSendKeys.
		 * 
		Sets whether all key (not mouse) events should be sent through the KEYEVENT message.
	
		 * Corresponding GameBots message for this command is
		 * SETSENDKEYS.
		 *
		 * 
		 *    @param PlayerId Id of the affected player. Used in GBUE2.
		 *    @param Player Name of the affected player. Used in GBScenario.
		 *    @param Send If true, the player can behave normally. If false, the player cannot perform any action.
		 */
		public SetSendKeys(
			UnrealId PlayerId,  String Player,  Boolean Send
		) {
			
				this.PlayerId = PlayerId;
            
				this.Player = Player;
            
				this.Send = Send;
            
		}

		
			/**
			 * Creates new instance of command SetSendKeys.
			 * 
		Sets whether all key (not mouse) events should be sent through the KEYEVENT message.
	
			 * Corresponding GameBots message for this command is
			 * SETSENDKEYS.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public SetSendKeys() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public SetSendKeys(SetSendKeys original) {
		   
		        this.PlayerId = original.PlayerId;
		   
		        this.Player = original.Player;
		   
		        this.Send = original.Send;
		   
		}
    
	        /**
	        Id of the affected player. Used in GBUE2. 
	        */
	        protected
	         UnrealId PlayerId =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Id of the affected player. Used in GBUE2. 
         */
        public UnrealId getPlayerId()
 	
	        {
	            return
	        	 PlayerId;
	        }
	        
	        
	        
 		
 		/**
         * Id of the affected player. Used in GBUE2. 
         */
        public SetSendKeys 
        setPlayerId(UnrealId PlayerId)
 	
			{
				this.PlayerId = PlayerId;
				return this;
			}
		
	        /**
	        Name of the affected player. Used in GBScenario. 
	        */
	        protected
	         String Player =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Name of the affected player. Used in GBScenario. 
         */
        public String getPlayer()
 	
	        {
	            return
	        	 Player;
	        }
	        
	        
	        
 		
 		/**
         * Name of the affected player. Used in GBScenario. 
         */
        public SetSendKeys 
        setPlayer(String Player)
 	
			{
				this.Player = Player;
				return this;
			}
		
	        /**
	        If true, the player can behave normally. If false, the player cannot perform any action. 
	        */
	        protected
	         Boolean Send =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * If true, the player can behave normally. If false, the player cannot perform any action. 
         */
        public Boolean isSend()
 	
	        {
	            return
	        	 Send;
	        }
	        
	        
	        
 		
 		/**
         * If true, the player can behave normally. If false, the player cannot perform any action. 
         */
        public SetSendKeys 
        setSend(Boolean Send)
 	
			{
				this.Send = Send;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>PlayerId</b> = " +
            	String.valueOf(getPlayerId()
 	) +
            	" <br/> " +
            	
            	"<b>Player</b> = " +
            	String.valueOf(getPlayer()
 	) +
            	" <br/> " +
            	
            	"<b>Send</b> = " +
            	String.valueOf(isSend()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("SETSENDKEYS");
     		
						if (PlayerId != null) {
							buf.append(" {PlayerId " + PlayerId.getStringId() + "}");
						}
					
						if (Player != null) {
							buf.append(" {Player " + Player + "}");
						}
					
						if (Send != null) {
							buf.append(" {Send " + Send + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	