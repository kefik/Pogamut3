
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command SENDCTRLMSG.
 		 *
 		 * 
		Send a message to the all bots or just one bot. To be used for "protocol within protocol", not perfect, but suffices for now.
	
         */
 	public class SendControlMessage 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {SendAll False}  {BotId unreal_id}  {Type text}  {PS1 text}  {PS2 text}  {PS3 text}  {PI1 0}  {PI2 0}  {PI3 0}  {PF1 0}  {PF2 0}  {PF3 0}  {PB1 False}  {PB2 False}  {PB3 False} ";
    
		/**
		 * Creates new instance of command SendControlMessage.
		 * 
		Send a message to the all bots or just one bot. To be used for "protocol within protocol", not perfect, but suffices for now.
	
		 * Corresponding GameBots message for this command is
		 * SENDCTRLMSG.
		 *
		 * 
		 *    @param SendAll True - sends the message to ALL connected bots, False - sends to one bot specified within BotId.
		 *    @param BotId Only valid for SendAll='false', here you can specify Id of the bot that should receive the message.
		 *    @param Type Custom type of the message.
		 *    @param PS1 Param String 1
		 *    @param PS2 Param String 2
		 *    @param PS3 Param String 3
		 *    @param PI1 Param Integer 1
		 *    @param PI2 Param Integer 2
		 *    @param PI3 Param Integer 3
		 *    @param PF1 Param Double 1
		 *    @param PF2 Param Double 2
		 *    @param PF3 Param Double 3
		 *    @param PB1 Param Boolean 1
		 *    @param PB2 Param Boolean 2
		 *    @param PB3 Param Boolean 3
		 */
		public SendControlMessage(
			Boolean SendAll,  UnrealId BotId,  String Type,  String PS1,  String PS2,  String PS3,  Integer PI1,  Integer PI2,  Integer PI3,  Double PF1,  Double PF2,  Double PF3,  Boolean PB1,  Boolean PB2,  Boolean PB3
		) {
			
				this.SendAll = SendAll;
            
				this.BotId = BotId;
            
				this.Type = Type;
            
				this.PS1 = PS1;
            
				this.PS2 = PS2;
            
				this.PS3 = PS3;
            
				this.PI1 = PI1;
            
				this.PI2 = PI2;
            
				this.PI3 = PI3;
            
				this.PF1 = PF1;
            
				this.PF2 = PF2;
            
				this.PF3 = PF3;
            
				this.PB1 = PB1;
            
				this.PB2 = PB2;
            
				this.PB3 = PB3;
            
		}

		
			/**
			 * Creates new instance of command SendControlMessage.
			 * 
		Send a message to the all bots or just one bot. To be used for "protocol within protocol", not perfect, but suffices for now.
	
			 * Corresponding GameBots message for this command is
			 * SENDCTRLMSG.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public SendControlMessage() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public SendControlMessage(SendControlMessage original) {
		   
		        this.SendAll = original.SendAll;
		   
		        this.BotId = original.BotId;
		   
		        this.Type = original.Type;
		   
		        this.PS1 = original.PS1;
		   
		        this.PS2 = original.PS2;
		   
		        this.PS3 = original.PS3;
		   
		        this.PI1 = original.PI1;
		   
		        this.PI2 = original.PI2;
		   
		        this.PI3 = original.PI3;
		   
		        this.PF1 = original.PF1;
		   
		        this.PF2 = original.PF2;
		   
		        this.PF3 = original.PF3;
		   
		        this.PB1 = original.PB1;
		   
		        this.PB2 = original.PB2;
		   
		        this.PB3 = original.PB3;
		   
		}
    
	        /**
	        True - sends the message to ALL connected bots, False - sends to one bot specified within BotId. 
	        */
	        protected
	         Boolean SendAll =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * True - sends the message to ALL connected bots, False - sends to one bot specified within BotId. 
         */
        public Boolean isSendAll()
 	
	        {
	            return
	        	 SendAll;
	        }
	        
	        
	        
 		
 		/**
         * True - sends the message to ALL connected bots, False - sends to one bot specified within BotId. 
         */
        public SendControlMessage 
        setSendAll(Boolean SendAll)
 	
			{
				this.SendAll = SendAll;
				return this;
			}
		
	        /**
	        Only valid for SendAll='false', here you can specify Id of the bot that should receive the message. 
	        */
	        protected
	         UnrealId BotId =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Only valid for SendAll='false', here you can specify Id of the bot that should receive the message. 
         */
        public UnrealId getBotId()
 	
	        {
	            return
	        	 BotId;
	        }
	        
	        
	        
 		
 		/**
         * Only valid for SendAll='false', here you can specify Id of the bot that should receive the message. 
         */
        public SendControlMessage 
        setBotId(UnrealId BotId)
 	
			{
				this.BotId = BotId;
				return this;
			}
		
	        /**
	        Custom type of the message. 
	        */
	        protected
	         String Type =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Custom type of the message. 
         */
        public String getType()
 	
	        {
	            return
	        	 Type;
	        }
	        
	        
	        
 		
 		/**
         * Custom type of the message. 
         */
        public SendControlMessage 
        setType(String Type)
 	
			{
				this.Type = Type;
				return this;
			}
		
	        /**
	        Param String 1 
	        */
	        protected
	         String PS1 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param String 1 
         */
        public String getPS1()
 	
	        {
	            return
	        	 PS1;
	        }
	        
	        
	        
 		
 		/**
         * Param String 1 
         */
        public SendControlMessage 
        setPS1(String PS1)
 	
			{
				this.PS1 = PS1;
				return this;
			}
		
	        /**
	        Param String 2 
	        */
	        protected
	         String PS2 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param String 2 
         */
        public String getPS2()
 	
	        {
	            return
	        	 PS2;
	        }
	        
	        
	        
 		
 		/**
         * Param String 2 
         */
        public SendControlMessage 
        setPS2(String PS2)
 	
			{
				this.PS2 = PS2;
				return this;
			}
		
	        /**
	        Param String 3 
	        */
	        protected
	         String PS3 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param String 3 
         */
        public String getPS3()
 	
	        {
	            return
	        	 PS3;
	        }
	        
	        
	        
 		
 		/**
         * Param String 3 
         */
        public SendControlMessage 
        setPS3(String PS3)
 	
			{
				this.PS3 = PS3;
				return this;
			}
		
	        /**
	        Param Integer 1 
	        */
	        protected
	         Integer PI1 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Integer 1 
         */
        public Integer getPI1()
 	
	        {
	            return
	        	 PI1;
	        }
	        
	        
	        
 		
 		/**
         * Param Integer 1 
         */
        public SendControlMessage 
        setPI1(Integer PI1)
 	
			{
				this.PI1 = PI1;
				return this;
			}
		
	        /**
	        Param Integer 2 
	        */
	        protected
	         Integer PI2 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Integer 2 
         */
        public Integer getPI2()
 	
	        {
	            return
	        	 PI2;
	        }
	        
	        
	        
 		
 		/**
         * Param Integer 2 
         */
        public SendControlMessage 
        setPI2(Integer PI2)
 	
			{
				this.PI2 = PI2;
				return this;
			}
		
	        /**
	        Param Integer 3 
	        */
	        protected
	         Integer PI3 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Integer 3 
         */
        public Integer getPI3()
 	
	        {
	            return
	        	 PI3;
	        }
	        
	        
	        
 		
 		/**
         * Param Integer 3 
         */
        public SendControlMessage 
        setPI3(Integer PI3)
 	
			{
				this.PI3 = PI3;
				return this;
			}
		
	        /**
	        Param Double 1 
	        */
	        protected
	         Double PF1 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Double 1 
         */
        public Double getPF1()
 	
	        {
	            return
	        	 PF1;
	        }
	        
	        
	        
 		
 		/**
         * Param Double 1 
         */
        public SendControlMessage 
        setPF1(Double PF1)
 	
			{
				this.PF1 = PF1;
				return this;
			}
		
	        /**
	        Param Double 2 
	        */
	        protected
	         Double PF2 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Double 2 
         */
        public Double getPF2()
 	
	        {
	            return
	        	 PF2;
	        }
	        
	        
	        
 		
 		/**
         * Param Double 2 
         */
        public SendControlMessage 
        setPF2(Double PF2)
 	
			{
				this.PF2 = PF2;
				return this;
			}
		
	        /**
	        Param Double 3 
	        */
	        protected
	         Double PF3 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Double 3 
         */
        public Double getPF3()
 	
	        {
	            return
	        	 PF3;
	        }
	        
	        
	        
 		
 		/**
         * Param Double 3 
         */
        public SendControlMessage 
        setPF3(Double PF3)
 	
			{
				this.PF3 = PF3;
				return this;
			}
		
	        /**
	        Param Boolean 1 
	        */
	        protected
	         Boolean PB1 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Boolean 1 
         */
        public Boolean isPB1()
 	
	        {
	            return
	        	 PB1;
	        }
	        
	        
	        
 		
 		/**
         * Param Boolean 1 
         */
        public SendControlMessage 
        setPB1(Boolean PB1)
 	
			{
				this.PB1 = PB1;
				return this;
			}
		
	        /**
	        Param Boolean 2 
	        */
	        protected
	         Boolean PB2 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Boolean 2 
         */
        public Boolean isPB2()
 	
	        {
	            return
	        	 PB2;
	        }
	        
	        
	        
 		
 		/**
         * Param Boolean 2 
         */
        public SendControlMessage 
        setPB2(Boolean PB2)
 	
			{
				this.PB2 = PB2;
				return this;
			}
		
	        /**
	        Param Boolean 3 
	        */
	        protected
	         Boolean PB3 =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Param Boolean 3 
         */
        public Boolean isPB3()
 	
	        {
	            return
	        	 PB3;
	        }
	        
	        
	        
 		
 		/**
         * Param Boolean 3 
         */
        public SendControlMessage 
        setPB3(Boolean PB3)
 	
			{
				this.PB3 = PB3;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>SendAll</b> = " +
            	String.valueOf(isSendAll()
 	) +
            	" <br/> " +
            	
            	"<b>BotId</b> = " +
            	String.valueOf(getBotId()
 	) +
            	" <br/> " +
            	
            	"<b>Type</b> = " +
            	String.valueOf(getType()
 	) +
            	" <br/> " +
            	
            	"<b>PS1</b> = " +
            	String.valueOf(getPS1()
 	) +
            	" <br/> " +
            	
            	"<b>PS2</b> = " +
            	String.valueOf(getPS2()
 	) +
            	" <br/> " +
            	
            	"<b>PS3</b> = " +
            	String.valueOf(getPS3()
 	) +
            	" <br/> " +
            	
            	"<b>PI1</b> = " +
            	String.valueOf(getPI1()
 	) +
            	" <br/> " +
            	
            	"<b>PI2</b> = " +
            	String.valueOf(getPI2()
 	) +
            	" <br/> " +
            	
            	"<b>PI3</b> = " +
            	String.valueOf(getPI3()
 	) +
            	" <br/> " +
            	
            	"<b>PF1</b> = " +
            	String.valueOf(getPF1()
 	) +
            	" <br/> " +
            	
            	"<b>PF2</b> = " +
            	String.valueOf(getPF2()
 	) +
            	" <br/> " +
            	
            	"<b>PF3</b> = " +
            	String.valueOf(getPF3()
 	) +
            	" <br/> " +
            	
            	"<b>PB1</b> = " +
            	String.valueOf(isPB1()
 	) +
            	" <br/> " +
            	
            	"<b>PB2</b> = " +
            	String.valueOf(isPB2()
 	) +
            	" <br/> " +
            	
            	"<b>PB3</b> = " +
            	String.valueOf(isPB3()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("SENDCTRLMSG");
     		
						if (SendAll != null) {
							buf.append(" {SendAll " + SendAll + "}");
						}
					
						if (BotId != null) {
							buf.append(" {BotId " + BotId.getStringId() + "}");
						}
					
						if (Type != null) {
							buf.append(" {Type " + Type + "}");
						}
					
						if (PS1 != null) {
							buf.append(" {PS1 " + PS1 + "}");
						}
					
						if (PS2 != null) {
							buf.append(" {PS2 " + PS2 + "}");
						}
					
						if (PS3 != null) {
							buf.append(" {PS3 " + PS3 + "}");
						}
					
						if (PI1 != null) {
							buf.append(" {PI1 " + PI1 + "}");
						}
					
						if (PI2 != null) {
							buf.append(" {PI2 " + PI2 + "}");
						}
					
						if (PI3 != null) {
							buf.append(" {PI3 " + PI3 + "}");
						}
					
						if (PF1 != null) {
							buf.append(" {PF1 " + PF1 + "}");
						}
					
						if (PF2 != null) {
							buf.append(" {PF2 " + PF2 + "}");
						}
					
						if (PF3 != null) {
							buf.append(" {PF3 " + PF3 + "}");
						}
					
						if (PB1 != null) {
							buf.append(" {PB1 " + PB1 + "}");
						}
					
						if (PB2 != null) {
							buf.append(" {PB2 " + PB2 + "}");
						}
					
						if (PB3 != null) {
							buf.append(" {PB3 " + PB3 + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	