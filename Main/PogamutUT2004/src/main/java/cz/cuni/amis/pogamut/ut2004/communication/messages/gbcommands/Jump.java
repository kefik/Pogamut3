
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command JUMP.
 		 *
 		 * Causes bot to jump.
         */
 	public class Jump 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {DoubleJump False}  {Delay 0}  {Force 0} ";
    
		/**
		 * Creates new instance of command Jump.
		 * Causes bot to jump.
		 * Corresponding GameBots message for this command is
		 * JUMP.
		 *
		 * 
		 *    @param DoubleJump 
			If set to True will cause the bot to perform double jump.
		
		 *    @param Delay 
			After time specified here, the bot performs second jump of a double jump (if DoubleJump is true). Time is in seconds. If not specified and DoubleJump is true, 0.5 seconds will be used.
		
		 *    @param Force 
			Force vector specifying how big the jump should be. Can't be set more than bot JumpZ variable for single jump and 2 * JumpZ variable for doube jump. Default value of JumpZ is 340 ut units (for UT2004). If not specified, JumpZ value will be used. If not specified and DoubleJump is true, 2 * JumpZ value will be used. Maximum for JumpZ is 755, which is actually more than human player can do, but it needs to be that high in order to have safe
			navigation through jumping links.
		
		 */
		public Jump(
			Boolean DoubleJump,  Double Delay,  Double Force
		) {
			
				this.DoubleJump = DoubleJump;
            
				this.Delay = Delay;
            
				this.Force = Force;
            
		}

		
			/**
			 * Creates new instance of command Jump.
			 * Causes bot to jump.
			 * Corresponding GameBots message for this command is
			 * JUMP.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public Jump() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public Jump(Jump original) {
		   
		        this.DoubleJump = original.DoubleJump;
		   
		        this.Delay = original.Delay;
		   
		        this.Force = original.Force;
		   
		}
    
	        /**
	        
			If set to True will cause the bot to perform double jump.
		 
	        */
	        protected
	         Boolean DoubleJump =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If set to True will cause the bot to perform double jump.
		 
         */
        public Boolean isDoubleJump()
 	
	        {
	            return
	        	 DoubleJump;
	        }
	        
	        
	        
 		
 		/**
         * 
			If set to True will cause the bot to perform double jump.
		 
         */
        public Jump 
        setDoubleJump(Boolean DoubleJump)
 	
			{
				this.DoubleJump = DoubleJump;
				return this;
			}
		
	        /**
	        
			After time specified here, the bot performs second jump of a double jump (if DoubleJump is true). Time is in seconds. If not specified and DoubleJump is true, 0.5 seconds will be used.
		 
	        */
	        protected
	         Double Delay =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			After time specified here, the bot performs second jump of a double jump (if DoubleJump is true). Time is in seconds. If not specified and DoubleJump is true, 0.5 seconds will be used.
		 
         */
        public Double getDelay()
 	
	        {
	            return
	        	 Delay;
	        }
	        
	        
	        
 		
 		/**
         * 
			After time specified here, the bot performs second jump of a double jump (if DoubleJump is true). Time is in seconds. If not specified and DoubleJump is true, 0.5 seconds will be used.
		 
         */
        public Jump 
        setDelay(Double Delay)
 	
			{
				this.Delay = Delay;
				return this;
			}
		
	        /**
	        
			Force vector specifying how big the jump should be. Can't be set more than bot JumpZ variable for single jump and 2 * JumpZ variable for doube jump. Default value of JumpZ is 340 ut units (for UT2004). If not specified, JumpZ value will be used. If not specified and DoubleJump is true, 2 * JumpZ value will be used. Maximum for JumpZ is 755, which is actually more than human player can do, but it needs to be that high in order to have safe
			navigation through jumping links.
		 
	        */
	        protected
	         Double Force =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Force vector specifying how big the jump should be. Can't be set more than bot JumpZ variable for single jump and 2 * JumpZ variable for doube jump. Default value of JumpZ is 340 ut units (for UT2004). If not specified, JumpZ value will be used. If not specified and DoubleJump is true, 2 * JumpZ value will be used. Maximum for JumpZ is 755, which is actually more than human player can do, but it needs to be that high in order to have safe
			navigation through jumping links.
		 
         */
        public Double getForce()
 	
	        {
	            return
	        	 Force;
	        }
	        
	        
	        
 		
 		/**
         * 
			Force vector specifying how big the jump should be. Can't be set more than bot JumpZ variable for single jump and 2 * JumpZ variable for doube jump. Default value of JumpZ is 340 ut units (for UT2004). If not specified, JumpZ value will be used. If not specified and DoubleJump is true, 2 * JumpZ value will be used. Maximum for JumpZ is 755, which is actually more than human player can do, but it needs to be that high in order to have safe
			navigation through jumping links.
		 
         */
        public Jump 
        setForce(Double Force)
 	
			{
				this.Force = Force;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>DoubleJump</b> = " +
            	String.valueOf(isDoubleJump()
 	) +
            	" <br/> " +
            	
            	"<b>Delay</b> = " +
            	String.valueOf(getDelay()
 	) +
            	" <br/> " +
            	
            	"<b>Force</b> = " +
            	String.valueOf(getForce()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("JUMP");
     		
						if (DoubleJump != null) {
							buf.append(" {DoubleJump " + DoubleJump + "}");
						}
					
						if (Delay != null) {
							buf.append(" {Delay " + Delay + "}");
						}
					
						if (Force != null) {
							buf.append(" {Force " + Force + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	