
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command SETEMIT.
 		 *
 		 * 
		Sets the emotional emitter for the bot and configures it. The emitter will float
        at the bots head following the bot.
	
         */
 	public class SetEmotionalEmitter 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Disable False}  {Pause False}  {FirstC 0,0,0}  {SecondC 0,0,0}  {StartVelocity 0,0,0}  {EndVelocity 0,0,0}  {VelocityRange 0}  {Size 0,0,0}  {LifeTime 0}  {FadeTime 0,0,0} ";
    
		/**
		 * Creates new instance of command SetEmotionalEmitter.
		 * 
		Sets the emotional emitter for the bot and configures it. The emitter will float
        at the bots head following the bot.
	
		 * Corresponding GameBots message for this command is
		 * SETEMIT.
		 *
		 * 
		 *    @param Disable 
            If true disables actual emittor (it will dissappear). No other attributes will be parsed.
        
		 *    @param Pause 
            Should pause the emitter, does not work right now.
        
		 *    @param FirstC 
            Starting color of the floating balls.
        
		 *    @param SecondC 
			Finishing color of the floating balls.
		
		 *    @param StartVelocity 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going out. Default (2,2,2).
		
		 *    @param EndVelocity 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going in. Default (-10,-10,-10).
		
		 *    @param VelocityRange 
			This will affect the speed of the balls. Default -20.
		
		 *    @param Size 
			This will affect the size of the balls. Default (4,4,8).
		
		 *    @param LifeTime 
			This will affect the life time of the balls and radius and speed they will
            be traversing. Default 1.6.
		
		 *    @param FadeTime 
			This will affect the fade in and fade out times of the balls. First value affects
            the starting fade out time. Second value will affect ending fade in time. The third
            value in the vector is ignored.
		
		 */
		public SetEmotionalEmitter(
			Boolean Disable,  Boolean Pause,  Vector3d FirstC,  Vector3d SecondC,  Velocity StartVelocity,  Velocity EndVelocity,  Double VelocityRange,  Vector3d Size,  Double LifeTime,  Vector3d FadeTime
		) {
			
				this.Disable = Disable;
            
				this.Pause = Pause;
            
				this.FirstC = FirstC;
            
				this.SecondC = SecondC;
            
				this.StartVelocity = StartVelocity;
            
				this.EndVelocity = EndVelocity;
            
				this.VelocityRange = VelocityRange;
            
				this.Size = Size;
            
				this.LifeTime = LifeTime;
            
				this.FadeTime = FadeTime;
            
		}

		
			/**
			 * Creates new instance of command SetEmotionalEmitter.
			 * 
		Sets the emotional emitter for the bot and configures it. The emitter will float
        at the bots head following the bot.
	
			 * Corresponding GameBots message for this command is
			 * SETEMIT.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public SetEmotionalEmitter() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public SetEmotionalEmitter(SetEmotionalEmitter original) {
		   
		        this.Disable = original.Disable;
		   
		        this.Pause = original.Pause;
		   
		        this.FirstC = original.FirstC;
		   
		        this.SecondC = original.SecondC;
		   
		        this.StartVelocity = original.StartVelocity;
		   
		        this.EndVelocity = original.EndVelocity;
		   
		        this.VelocityRange = original.VelocityRange;
		   
		        this.Size = original.Size;
		   
		        this.LifeTime = original.LifeTime;
		   
		        this.FadeTime = original.FadeTime;
		   
		}
    
	        /**
	        
            If true disables actual emittor (it will dissappear). No other attributes will be parsed.
         
	        */
	        protected
	         Boolean Disable =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
            If true disables actual emittor (it will dissappear). No other attributes will be parsed.
         
         */
        public Boolean isDisable()
 	
	        {
	            return
	        	 Disable;
	        }
	        
	        
	        
 		
 		/**
         * 
            If true disables actual emittor (it will dissappear). No other attributes will be parsed.
         
         */
        public SetEmotionalEmitter 
        setDisable(Boolean Disable)
 	
			{
				this.Disable = Disable;
				return this;
			}
		
	        /**
	        
            Should pause the emitter, does not work right now.
         
	        */
	        protected
	         Boolean Pause =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
            Should pause the emitter, does not work right now.
         
         */
        public Boolean isPause()
 	
	        {
	            return
	        	 Pause;
	        }
	        
	        
	        
 		
 		/**
         * 
            Should pause the emitter, does not work right now.
         
         */
        public SetEmotionalEmitter 
        setPause(Boolean Pause)
 	
			{
				this.Pause = Pause;
				return this;
			}
		
	        /**
	        
            Starting color of the floating balls.
         
	        */
	        protected
	         Vector3d FirstC =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
            Starting color of the floating balls.
         
         */
        public Vector3d getFirstC()
 	
	        {
	            return
	        	 FirstC;
	        }
	        
	        
	        
 		
 		/**
         * 
            Starting color of the floating balls.
         
         */
        public SetEmotionalEmitter 
        setFirstC(Vector3d FirstC)
 	
			{
				this.FirstC = FirstC;
				return this;
			}
		
	        /**
	        
			Finishing color of the floating balls.
		 
	        */
	        protected
	         Vector3d SecondC =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Finishing color of the floating balls.
		 
         */
        public Vector3d getSecondC()
 	
	        {
	            return
	        	 SecondC;
	        }
	        
	        
	        
 		
 		/**
         * 
			Finishing color of the floating balls.
		 
         */
        public SetEmotionalEmitter 
        setSecondC(Vector3d SecondC)
 	
			{
				this.SecondC = SecondC;
				return this;
			}
		
	        /**
	        
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going out. Default (2,2,2).
		 
	        */
	        protected
	         Velocity StartVelocity =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going out. Default (2,2,2).
		 
         */
        public Velocity getStartVelocity()
 	
	        {
	            return
	        	 StartVelocity;
	        }
	        
	        
	        
 		
 		/**
         * 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going out. Default (2,2,2).
		 
         */
        public SetEmotionalEmitter 
        setStartVelocity(Velocity StartVelocity)
 	
			{
				this.StartVelocity = StartVelocity;
				return this;
			}
		
	        /**
	        
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going in. Default (-10,-10,-10).
		 
	        */
	        protected
	         Velocity EndVelocity =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going in. Default (-10,-10,-10).
		 
         */
        public Velocity getEndVelocity()
 	
	        {
	            return
	        	 EndVelocity;
	        }
	        
	        
	        
 		
 		/**
         * 
			This is relative velocity direction vector that will affect the speed and direction of the balls
            going in. Default (-10,-10,-10).
		 
         */
        public SetEmotionalEmitter 
        setEndVelocity(Velocity EndVelocity)
 	
			{
				this.EndVelocity = EndVelocity;
				return this;
			}
		
	        /**
	        
			This will affect the speed of the balls. Default -20.
		 
	        */
	        protected
	         Double VelocityRange =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This will affect the speed of the balls. Default -20.
		 
         */
        public Double getVelocityRange()
 	
	        {
	            return
	        	 VelocityRange;
	        }
	        
	        
	        
 		
 		/**
         * 
			This will affect the speed of the balls. Default -20.
		 
         */
        public SetEmotionalEmitter 
        setVelocityRange(Double VelocityRange)
 	
			{
				this.VelocityRange = VelocityRange;
				return this;
			}
		
	        /**
	        
			This will affect the size of the balls. Default (4,4,8).
		 
	        */
	        protected
	         Vector3d Size =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This will affect the size of the balls. Default (4,4,8).
		 
         */
        public Vector3d getSize()
 	
	        {
	            return
	        	 Size;
	        }
	        
	        
	        
 		
 		/**
         * 
			This will affect the size of the balls. Default (4,4,8).
		 
         */
        public SetEmotionalEmitter 
        setSize(Vector3d Size)
 	
			{
				this.Size = Size;
				return this;
			}
		
	        /**
	        
			This will affect the life time of the balls and radius and speed they will
            be traversing. Default 1.6.
		 
	        */
	        protected
	         Double LifeTime =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This will affect the life time of the balls and radius and speed they will
            be traversing. Default 1.6.
		 
         */
        public Double getLifeTime()
 	
	        {
	            return
	        	 LifeTime;
	        }
	        
	        
	        
 		
 		/**
         * 
			This will affect the life time of the balls and radius and speed they will
            be traversing. Default 1.6.
		 
         */
        public SetEmotionalEmitter 
        setLifeTime(Double LifeTime)
 	
			{
				this.LifeTime = LifeTime;
				return this;
			}
		
	        /**
	        
			This will affect the fade in and fade out times of the balls. First value affects
            the starting fade out time. Second value will affect ending fade in time. The third
            value in the vector is ignored.
		 
	        */
	        protected
	         Vector3d FadeTime =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			This will affect the fade in and fade out times of the balls. First value affects
            the starting fade out time. Second value will affect ending fade in time. The third
            value in the vector is ignored.
		 
         */
        public Vector3d getFadeTime()
 	
	        {
	            return
	        	 FadeTime;
	        }
	        
	        
	        
 		
 		/**
         * 
			This will affect the fade in and fade out times of the balls. First value affects
            the starting fade out time. Second value will affect ending fade in time. The third
            value in the vector is ignored.
		 
         */
        public SetEmotionalEmitter 
        setFadeTime(Vector3d FadeTime)
 	
			{
				this.FadeTime = FadeTime;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Disable</b> = " +
            	String.valueOf(isDisable()
 	) +
            	" <br/> " +
            	
            	"<b>Pause</b> = " +
            	String.valueOf(isPause()
 	) +
            	" <br/> " +
            	
            	"<b>FirstC</b> = " +
            	String.valueOf(getFirstC()
 	) +
            	" <br/> " +
            	
            	"<b>SecondC</b> = " +
            	String.valueOf(getSecondC()
 	) +
            	" <br/> " +
            	
            	"<b>StartVelocity</b> = " +
            	String.valueOf(getStartVelocity()
 	) +
            	" <br/> " +
            	
            	"<b>EndVelocity</b> = " +
            	String.valueOf(getEndVelocity()
 	) +
            	" <br/> " +
            	
            	"<b>VelocityRange</b> = " +
            	String.valueOf(getVelocityRange()
 	) +
            	" <br/> " +
            	
            	"<b>Size</b> = " +
            	String.valueOf(getSize()
 	) +
            	" <br/> " +
            	
            	"<b>LifeTime</b> = " +
            	String.valueOf(getLifeTime()
 	) +
            	" <br/> " +
            	
            	"<b>FadeTime</b> = " +
            	String.valueOf(getFadeTime()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("SETEMIT");
     		
						if (Disable != null) {
							buf.append(" {Disable " + Disable + "}");
						}
					
						if (Pause != null) {
							buf.append(" {Pause " + Pause + "}");
						}
					
						if (FirstC != null) {
							buf.append(" {FirstC " +
								FirstC.getX() + "," +
								FirstC.getY() + "," +
								FirstC.getZ() + "}");
						}
					
						if (SecondC != null) {
							buf.append(" {SecondC " +
								SecondC.getX() + "," +
								SecondC.getY() + "," +
								SecondC.getZ() + "}");
						}
					
					    if (StartVelocity != null) {
					        buf.append(" {StartVelocity " +
					            StartVelocity.getX() + "," +
					            StartVelocity.getY() + "," +
					            StartVelocity.getZ() + "}");
					    }
					
					    if (EndVelocity != null) {
					        buf.append(" {EndVelocity " +
					            EndVelocity.getX() + "," +
					            EndVelocity.getY() + "," +
					            EndVelocity.getZ() + "}");
					    }
					
						if (VelocityRange != null) {
							buf.append(" {VelocityRange " + VelocityRange + "}");
						}
					
						if (Size != null) {
							buf.append(" {Size " +
								Size.getX() + "," +
								Size.getY() + "," +
								Size.getZ() + "}");
						}
					
						if (LifeTime != null) {
							buf.append(" {LifeTime " + LifeTime + "}");
						}
					
						if (FadeTime != null) {
							buf.append(" {FadeTime " +
								FadeTime.getX() + "," +
								FadeTime.getY() + "," +
								FadeTime.getZ() + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	