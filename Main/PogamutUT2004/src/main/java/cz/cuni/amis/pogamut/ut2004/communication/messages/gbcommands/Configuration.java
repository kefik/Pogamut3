
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.gbinfomessages.ConfigChange;
 		/**
 		 * Representation of the GameBots2004 command CONF.
 		 *
 		 * 
		Configures various attributes of the bot. This command can be
		issued also by bot on the bot itself (in this case Id attribute
		is not parsed).
	
         */
 	public class Configuration 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Id unreal_id}  {AutoTrace False}  {ManualSpawn False}  {Name text}  {Action text}  {SpeedMultiplier 0}  {RotationRate 0,0,0}  {Invulnerable False}  {SelfUpdateTime 0}  {VisionTime 0}  {ShowDebug False}  {ShowFocalPoint False}  {DrawTraceLines False}  {SynchronousOff False}  {SyncNavPointsOff False}  {AutoPickupOff False} ";
    
		/**
		 * Creates new instance of command Configuration.
		 * 
		Configures various attributes of the bot. This command can be
		issued also by bot on the bot itself (in this case Id attribute
		is not parsed).
	
		 * Corresponding GameBots message for this command is
		 * CONF.
		 *
		 * 
		 *    @param Id 
			Id of the target bot. Not used if sent as a command for the
			bot.
		
		 *    @param AutoTrace 
			Enables/disables auto ray tracing feature.
		
		 *    @param ManualSpawn 
			Sets if the bot wil have tol be respawned after death
			manually by RESPAWN command. If false, the bot will respawn
			automatically.
		
		 *    @param Name 
			You can change the name of the bot in the game.
		
		 *    @param Action 
			Sets atomic action for the bot (BDI).
		
		 *    @param SpeedMultiplier 
			Bots default speed will be multiplied by this number. Ranges from 0.1 to 2 (default, can be set in ini in [GameBots2004.RemoteBot] MaxSpeed).
		
		 *    @param RotationRate 
			Sets the bot rotation rate. Default rotation rate is: (Pitch=3072,Yaw=60000,Roll=2048) and may be configured in ini file in [GameBots2004.RemoteBot] DefaultRotationRate. (pitch - up/down, yaw - left/right, roll - equivalent of doing a cartwheel)
		
		 *    @param Invulnerable 
			Will set godmode for bot on (bot can't be killed). This can
			be changed just when cheating is enabled on the server.
			(bAllowCheats = True)
		
		 *    @param SelfUpdateTime 
			The delay between two self message synchronous batches 
			(can range from 0.01 to 2 seconds). Will be used only if NewSelfBatchProtocol
			attribute is set to true in INIT message. Setting this can change VisionTime value 
			as well, as VisionTime needs to be set to multiple of this value.
		
		 *    @param VisionTime 
			The delay between two synchronous batches containing vision updates
			(can range from 0.1 to 2 seconds). If NewSelfBatchProtocol
			attribute is set to true in INIT message then this value can be set only to
			multiples of SelfUpdateTime - the closest value will be found and VisionTime
			will be set to this number.
		
		 *    @param ShowDebug 
			If true some additional debug information will be logged to
			UT2004 server console window.
		
		 *    @param ShowFocalPoint 
			If set to true an actor will appear in the game on the
			location the bot is actually looking at.
		
		 *    @param DrawTraceLines 
			If set to true, the rays of automatic ray tracing (ATR
			messages) will be drawn in the game.
		
		 *    @param SynchronousOff 
			It enables/disables sending of all GB synchronous messages
			for the bot.
		
		 *    @param SyncNavPointsOff 
			It enables/disables sending of NavPoints in GB synchronous batch for the bot.
		
		 *    @param AutoPickupOff 
			It enables/disables automatic pickup of the bot. If true the items can be picked up through PICK command.
		
		 */
		public Configuration(
			UnrealId Id,  Boolean AutoTrace,  Boolean ManualSpawn,  String Name,  String Action,  Double SpeedMultiplier,  Rotation RotationRate,  Boolean Invulnerable,  Double SelfUpdateTime,  Double VisionTime,  Boolean ShowDebug,  Boolean ShowFocalPoint,  Boolean DrawTraceLines,  Boolean SynchronousOff,  Boolean SyncNavPointsOff,  Boolean AutoPickupOff
		) {
			
				this.Id = Id;
            
				this.AutoTrace = AutoTrace;
            
				this.ManualSpawn = ManualSpawn;
            
				this.Name = Name;
            
				this.Action = Action;
            
				this.SpeedMultiplier = SpeedMultiplier;
            
				this.RotationRate = RotationRate;
            
				this.Invulnerable = Invulnerable;
            
				this.SelfUpdateTime = SelfUpdateTime;
            
				this.VisionTime = VisionTime;
            
				this.ShowDebug = ShowDebug;
            
				this.ShowFocalPoint = ShowFocalPoint;
            
				this.DrawTraceLines = DrawTraceLines;
            
				this.SynchronousOff = SynchronousOff;
            
				this.SyncNavPointsOff = SyncNavPointsOff;
            
				this.AutoPickupOff = AutoPickupOff;
            
		}

		
			/**
			 * Creates new instance of command Configuration.
			 * 
		Configures various attributes of the bot. This command can be
		issued also by bot on the bot itself (in this case Id attribute
		is not parsed).
	
			 * Corresponding GameBots message for this command is
			 * CONF.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public Configuration() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public Configuration(Configuration original) {
		   
		        this.Id = original.Id;
		   
		        this.AutoTrace = original.AutoTrace;
		   
		        this.ManualSpawn = original.ManualSpawn;
		   
		        this.Name = original.Name;
		   
		        this.Action = original.Action;
		   
		        this.SpeedMultiplier = original.SpeedMultiplier;
		   
		        this.RotationRate = original.RotationRate;
		   
		        this.Invulnerable = original.Invulnerable;
		   
		        this.SelfUpdateTime = original.SelfUpdateTime;
		   
		        this.VisionTime = original.VisionTime;
		   
		        this.ShowDebug = original.ShowDebug;
		   
		        this.ShowFocalPoint = original.ShowFocalPoint;
		   
		        this.DrawTraceLines = original.DrawTraceLines;
		   
		        this.SynchronousOff = original.SynchronousOff;
		   
		        this.SyncNavPointsOff = original.SyncNavPointsOff;
		   
		        this.AutoPickupOff = original.AutoPickupOff;
		   
		}
    
	        /**
	        
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
	        */
	        protected
	         UnrealId Id =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
         */
        public UnrealId getId()
 	
	        {
	            return
	        	 Id;
	        }
	        
	        
	        
 		
 		/**
         * 
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
         */
        public Configuration 
        setId(UnrealId Id)
 	
			{
				this.Id = Id;
				return this;
			}
		
	        /**
	        
			Enables/disables auto ray tracing feature.
		 
	        */
	        protected
	         Boolean AutoTrace =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Enables/disables auto ray tracing feature.
		 
         */
        public Boolean isAutoTrace()
 	
	        {
	            return
	        	 AutoTrace;
	        }
	        
	        
	        
 		
 		/**
         * 
			Enables/disables auto ray tracing feature.
		 
         */
        public Configuration 
        setAutoTrace(Boolean AutoTrace)
 	
			{
				this.AutoTrace = AutoTrace;
				return this;
			}
		
	        /**
	        
			Sets if the bot wil have tol be respawned after death
			manually by RESPAWN command. If false, the bot will respawn
			automatically.
		 
	        */
	        protected
	         Boolean ManualSpawn =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Sets if the bot wil have tol be respawned after death
			manually by RESPAWN command. If false, the bot will respawn
			automatically.
		 
         */
        public Boolean isManualSpawn()
 	
	        {
	            return
	        	 ManualSpawn;
	        }
	        
	        
	        
 		
 		/**
         * 
			Sets if the bot wil have tol be respawned after death
			manually by RESPAWN command. If false, the bot will respawn
			automatically.
		 
         */
        public Configuration 
        setManualSpawn(Boolean ManualSpawn)
 	
			{
				this.ManualSpawn = ManualSpawn;
				return this;
			}
		
	        /**
	        
			You can change the name of the bot in the game.
		 
	        */
	        protected
	         String Name =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			You can change the name of the bot in the game.
		 
         */
        public String getName()
 	
	        {
	            return
	        	 Name;
	        }
	        
	        
	        
 		
 		/**
         * 
			You can change the name of the bot in the game.
		 
         */
        public Configuration 
        setName(String Name)
 	
			{
				this.Name = Name;
				return this;
			}
		
	        /**
	        
			Sets atomic action for the bot (BDI).
		 
	        */
	        protected
	         String Action =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Sets atomic action for the bot (BDI).
		 
         */
        public String getAction()
 	
	        {
	            return
	        	 Action;
	        }
	        
	        
	        
 		
 		/**
         * 
			Sets atomic action for the bot (BDI).
		 
         */
        public Configuration 
        setAction(String Action)
 	
			{
				this.Action = Action;
				return this;
			}
		
	        /**
	        
			Bots default speed will be multiplied by this number. Ranges from 0.1 to 2 (default, can be set in ini in [GameBots2004.RemoteBot] MaxSpeed).
		 
	        */
	        protected
	         Double SpeedMultiplier =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Bots default speed will be multiplied by this number. Ranges from 0.1 to 2 (default, can be set in ini in [GameBots2004.RemoteBot] MaxSpeed).
		 
         */
        public Double getSpeedMultiplier()
 	
	        {
	            return
	        	 SpeedMultiplier;
	        }
	        
	        
	        
 		
 		/**
         * 
			Bots default speed will be multiplied by this number. Ranges from 0.1 to 2 (default, can be set in ini in [GameBots2004.RemoteBot] MaxSpeed).
		 
         */
        public Configuration 
        setSpeedMultiplier(Double SpeedMultiplier)
 	
			{
				this.SpeedMultiplier = SpeedMultiplier;
				return this;
			}
		
	        /**
	        
			Sets the bot rotation rate. Default rotation rate is: (Pitch=3072,Yaw=60000,Roll=2048) and may be configured in ini file in [GameBots2004.RemoteBot] DefaultRotationRate. (pitch - up/down, yaw - left/right, roll - equivalent of doing a cartwheel)
		 
	        */
	        protected
	         Rotation RotationRate =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Sets the bot rotation rate. Default rotation rate is: (Pitch=3072,Yaw=60000,Roll=2048) and may be configured in ini file in [GameBots2004.RemoteBot] DefaultRotationRate. (pitch - up/down, yaw - left/right, roll - equivalent of doing a cartwheel)
		 
         */
        public Rotation getRotationRate()
 	
	        {
	            return
	        	 RotationRate;
	        }
	        
	        
	        
 		
 		/**
         * 
			Sets the bot rotation rate. Default rotation rate is: (Pitch=3072,Yaw=60000,Roll=2048) and may be configured in ini file in [GameBots2004.RemoteBot] DefaultRotationRate. (pitch - up/down, yaw - left/right, roll - equivalent of doing a cartwheel)
		 
         */
        public Configuration 
        setRotationRate(Rotation RotationRate)
 	
			{
				this.RotationRate = RotationRate;
				return this;
			}
		
	        /**
	        
			Will set godmode for bot on (bot can't be killed). This can
			be changed just when cheating is enabled on the server.
			(bAllowCheats = True)
		 
	        */
	        protected
	         Boolean Invulnerable =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Will set godmode for bot on (bot can't be killed). This can
			be changed just when cheating is enabled on the server.
			(bAllowCheats = True)
		 
         */
        public Boolean isInvulnerable()
 	
	        {
	            return
	        	 Invulnerable;
	        }
	        
	        
	        
 		
 		/**
         * 
			Will set godmode for bot on (bot can't be killed). This can
			be changed just when cheating is enabled on the server.
			(bAllowCheats = True)
		 
         */
        public Configuration 
        setInvulnerable(Boolean Invulnerable)
 	
			{
				this.Invulnerable = Invulnerable;
				return this;
			}
		
	        /**
	        
			The delay between two self message synchronous batches 
			(can range from 0.01 to 2 seconds). Will be used only if NewSelfBatchProtocol
			attribute is set to true in INIT message. Setting this can change VisionTime value 
			as well, as VisionTime needs to be set to multiple of this value.
		 
	        */
	        protected
	         Double SelfUpdateTime =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			The delay between two self message synchronous batches 
			(can range from 0.01 to 2 seconds). Will be used only if NewSelfBatchProtocol
			attribute is set to true in INIT message. Setting this can change VisionTime value 
			as well, as VisionTime needs to be set to multiple of this value.
		 
         */
        public Double getSelfUpdateTime()
 	
	        {
	            return
	        	 SelfUpdateTime;
	        }
	        
	        
	        
 		
 		/**
         * 
			The delay between two self message synchronous batches 
			(can range from 0.01 to 2 seconds). Will be used only if NewSelfBatchProtocol
			attribute is set to true in INIT message. Setting this can change VisionTime value 
			as well, as VisionTime needs to be set to multiple of this value.
		 
         */
        public Configuration 
        setSelfUpdateTime(Double SelfUpdateTime)
 	
			{
				this.SelfUpdateTime = SelfUpdateTime;
				return this;
			}
		
	        /**
	        
			The delay between two synchronous batches containing vision updates
			(can range from 0.1 to 2 seconds). If NewSelfBatchProtocol
			attribute is set to true in INIT message then this value can be set only to
			multiples of SelfUpdateTime - the closest value will be found and VisionTime
			will be set to this number.
		 
	        */
	        protected
	         Double VisionTime =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			The delay between two synchronous batches containing vision updates
			(can range from 0.1 to 2 seconds). If NewSelfBatchProtocol
			attribute is set to true in INIT message then this value can be set only to
			multiples of SelfUpdateTime - the closest value will be found and VisionTime
			will be set to this number.
		 
         */
        public Double getVisionTime()
 	
	        {
	            return
	        	 VisionTime;
	        }
	        
	        
	        
 		
 		/**
         * 
			The delay between two synchronous batches containing vision updates
			(can range from 0.1 to 2 seconds). If NewSelfBatchProtocol
			attribute is set to true in INIT message then this value can be set only to
			multiples of SelfUpdateTime - the closest value will be found and VisionTime
			will be set to this number.
		 
         */
        public Configuration 
        setVisionTime(Double VisionTime)
 	
			{
				this.VisionTime = VisionTime;
				return this;
			}
		
	        /**
	        
			If true some additional debug information will be logged to
			UT2004 server console window.
		 
	        */
	        protected
	         Boolean ShowDebug =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If true some additional debug information will be logged to
			UT2004 server console window.
		 
         */
        public Boolean isShowDebug()
 	
	        {
	            return
	        	 ShowDebug;
	        }
	        
	        
	        
 		
 		/**
         * 
			If true some additional debug information will be logged to
			UT2004 server console window.
		 
         */
        public Configuration 
        setShowDebug(Boolean ShowDebug)
 	
			{
				this.ShowDebug = ShowDebug;
				return this;
			}
		
	        /**
	        
			If set to true an actor will appear in the game on the
			location the bot is actually looking at.
		 
	        */
	        protected
	         Boolean ShowFocalPoint =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If set to true an actor will appear in the game on the
			location the bot is actually looking at.
		 
         */
        public Boolean isShowFocalPoint()
 	
	        {
	            return
	        	 ShowFocalPoint;
	        }
	        
	        
	        
 		
 		/**
         * 
			If set to true an actor will appear in the game on the
			location the bot is actually looking at.
		 
         */
        public Configuration 
        setShowFocalPoint(Boolean ShowFocalPoint)
 	
			{
				this.ShowFocalPoint = ShowFocalPoint;
				return this;
			}
		
	        /**
	        
			If set to true, the rays of automatic ray tracing (ATR
			messages) will be drawn in the game.
		 
	        */
	        protected
	         Boolean DrawTraceLines =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If set to true, the rays of automatic ray tracing (ATR
			messages) will be drawn in the game.
		 
         */
        public Boolean isDrawTraceLines()
 	
	        {
	            return
	        	 DrawTraceLines;
	        }
	        
	        
	        
 		
 		/**
         * 
			If set to true, the rays of automatic ray tracing (ATR
			messages) will be drawn in the game.
		 
         */
        public Configuration 
        setDrawTraceLines(Boolean DrawTraceLines)
 	
			{
				this.DrawTraceLines = DrawTraceLines;
				return this;
			}
		
	        /**
	        
			It enables/disables sending of all GB synchronous messages
			for the bot.
		 
	        */
	        protected
	         Boolean SynchronousOff =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			It enables/disables sending of all GB synchronous messages
			for the bot.
		 
         */
        public Boolean isSynchronousOff()
 	
	        {
	            return
	        	 SynchronousOff;
	        }
	        
	        
	        
 		
 		/**
         * 
			It enables/disables sending of all GB synchronous messages
			for the bot.
		 
         */
        public Configuration 
        setSynchronousOff(Boolean SynchronousOff)
 	
			{
				this.SynchronousOff = SynchronousOff;
				return this;
			}
		
	        /**
	        
			It enables/disables sending of NavPoints in GB synchronous batch for the bot.
		 
	        */
	        protected
	         Boolean SyncNavPointsOff =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			It enables/disables sending of NavPoints in GB synchronous batch for the bot.
		 
         */
        public Boolean isSyncNavPointsOff()
 	
	        {
	            return
	        	 SyncNavPointsOff;
	        }
	        
	        
	        
 		
 		/**
         * 
			It enables/disables sending of NavPoints in GB synchronous batch for the bot.
		 
         */
        public Configuration 
        setSyncNavPointsOff(Boolean SyncNavPointsOff)
 	
			{
				this.SyncNavPointsOff = SyncNavPointsOff;
				return this;
			}
		
	        /**
	        
			It enables/disables automatic pickup of the bot. If true the items can be picked up through PICK command.
		 
	        */
	        protected
	         Boolean AutoPickupOff =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			It enables/disables automatic pickup of the bot. If true the items can be picked up through PICK command.
		 
         */
        public Boolean isAutoPickupOff()
 	
	        {
	            return
	        	 AutoPickupOff;
	        }
	        
	        
	        
 		
 		/**
         * 
			It enables/disables automatic pickup of the bot. If true the items can be picked up through PICK command.
		 
         */
        public Configuration 
        setAutoPickupOff(Boolean AutoPickupOff)
 	
			{
				this.AutoPickupOff = AutoPickupOff;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Id</b> = " +
            	String.valueOf(getId()
 	) +
            	" <br/> " +
            	
            	"<b>AutoTrace</b> = " +
            	String.valueOf(isAutoTrace()
 	) +
            	" <br/> " +
            	
            	"<b>ManualSpawn</b> = " +
            	String.valueOf(isManualSpawn()
 	) +
            	" <br/> " +
            	
            	"<b>Name</b> = " +
            	String.valueOf(getName()
 	) +
            	" <br/> " +
            	
            	"<b>Action</b> = " +
            	String.valueOf(getAction()
 	) +
            	" <br/> " +
            	
            	"<b>SpeedMultiplier</b> = " +
            	String.valueOf(getSpeedMultiplier()
 	) +
            	" <br/> " +
            	
            	"<b>RotationRate</b> = " +
            	String.valueOf(getRotationRate()
 	) +
            	" <br/> " +
            	
            	"<b>Invulnerable</b> = " +
            	String.valueOf(isInvulnerable()
 	) +
            	" <br/> " +
            	
            	"<b>SelfUpdateTime</b> = " +
            	String.valueOf(getSelfUpdateTime()
 	) +
            	" <br/> " +
            	
            	"<b>VisionTime</b> = " +
            	String.valueOf(getVisionTime()
 	) +
            	" <br/> " +
            	
            	"<b>ShowDebug</b> = " +
            	String.valueOf(isShowDebug()
 	) +
            	" <br/> " +
            	
            	"<b>ShowFocalPoint</b> = " +
            	String.valueOf(isShowFocalPoint()
 	) +
            	" <br/> " +
            	
            	"<b>DrawTraceLines</b> = " +
            	String.valueOf(isDrawTraceLines()
 	) +
            	" <br/> " +
            	
            	"<b>SynchronousOff</b> = " +
            	String.valueOf(isSynchronousOff()
 	) +
            	" <br/> " +
            	
            	"<b>SyncNavPointsOff</b> = " +
            	String.valueOf(isSyncNavPointsOff()
 	) +
            	" <br/> " +
            	
            	"<b>AutoPickupOff</b> = " +
            	String.valueOf(isAutoPickupOff()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("CONF");
     		
						if (Id != null) {
							buf.append(" {Id " + Id.getStringId() + "}");
						}
					
						if (AutoTrace != null) {
							buf.append(" {AutoTrace " + AutoTrace + "}");
						}
					
						if (ManualSpawn != null) {
							buf.append(" {ManualSpawn " + ManualSpawn + "}");
						}
					
						if (Name != null) {
							buf.append(" {Name " + Name + "}");
						}
					
						if (Action != null) {
							buf.append(" {Action " + Action + "}");
						}
					
						if (SpeedMultiplier != null) {
							buf.append(" {SpeedMultiplier " + SpeedMultiplier + "}");
						}
					
					    if (RotationRate != null) {
					        buf.append(" {RotationRate " +
					            RotationRate.getPitch() + "," +
					            RotationRate.getYaw() + "," +
					            RotationRate.getRoll() + "}");
					    }
					
						if (Invulnerable != null) {
							buf.append(" {Invulnerable " + Invulnerable + "}");
						}
					
						if (SelfUpdateTime != null) {
							buf.append(" {SelfUpdateTime " + SelfUpdateTime + "}");
						}
					
						if (VisionTime != null) {
							buf.append(" {VisionTime " + VisionTime + "}");
						}
					
						if (ShowDebug != null) {
							buf.append(" {ShowDebug " + ShowDebug + "}");
						}
					
						if (ShowFocalPoint != null) {
							buf.append(" {ShowFocalPoint " + ShowFocalPoint + "}");
						}
					
						if (DrawTraceLines != null) {
							buf.append(" {DrawTraceLines " + DrawTraceLines + "}");
						}
					
						if (SynchronousOff != null) {
							buf.append(" {SynchronousOff " + SynchronousOff + "}");
						}
					
						if (SyncNavPointsOff != null) {
							buf.append(" {SyncNavPointsOff " + SyncNavPointsOff + "}");
						}
					
						if (AutoPickupOff != null) {
							buf.append(" {AutoPickupOff " + AutoPickupOff + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
                        
                        /**
                        * Copy configuration from existing info message to this command.
                        */
                        public void copy(ConfigChange confCh) {
            setAutoPickupOff(confCh.isAutoPickupOff());
            setAutoTrace(confCh.isAutoTrace());
            setDrawTraceLines(confCh.isDrawTraceLines());
            setInvulnerable(confCh.isInvulnerable());
            setManualSpawn(confCh.isManualSpawn());
            setShowDebug(confCh.isShowDebug());
            setShowFocalPoint(confCh.isShowFocalPoint());
            setSynchronousOff(confCh.isSynchronousOff());
            }
                    
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	