
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command ROTATE.
 		 *
 		 * Turns the bot by a specified amount.
         */
 	public class Rotate 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Amount 0}  {Axis text} ";
    
		/**
		 * Creates new instance of command Rotate.
		 * Turns the bot by a specified amount.
		 * Corresponding GameBots message for this command is
		 * ROTATE.
		 *
		 * 
		 *    @param Amount 
			Amount in UT units to rotate. May be negative to rotate
			counter clockwise. This rotation is relatively added to bot current rotation, then the shortest turn to achieve this new rotation will be performed (so the maximum turn you can achive is to turn back by supporting value 32767 or -32767).
		
		 *    @param Axis 
			If provided as "Vertical", rotation will be done to Pitch
			(up/down). Any other value, or not provided, and rotation
			will be to Yaw (left/right).
		
		 */
		public Rotate(
			Integer Amount,  String Axis
		) {
			
				this.Amount = Amount;
            
				this.Axis = Axis;
            
		}

		
			/**
			 * Creates new instance of command Rotate.
			 * Turns the bot by a specified amount.
			 * Corresponding GameBots message for this command is
			 * ROTATE.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public Rotate() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public Rotate(Rotate original) {
		   
		        this.Amount = original.Amount;
		   
		        this.Axis = original.Axis;
		   
		}
    
	        /**
	        
			Amount in UT units to rotate. May be negative to rotate
			counter clockwise. This rotation is relatively added to bot current rotation, then the shortest turn to achieve this new rotation will be performed (so the maximum turn you can achive is to turn back by supporting value 32767 or -32767).
		 
	        */
	        protected
	         Integer Amount =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Amount in UT units to rotate. May be negative to rotate
			counter clockwise. This rotation is relatively added to bot current rotation, then the shortest turn to achieve this new rotation will be performed (so the maximum turn you can achive is to turn back by supporting value 32767 or -32767).
		 
         */
        public Integer getAmount()
 	
	        {
	            return
	        	 Amount;
	        }
	        
	        
	        
 		
 		/**
         * 
			Amount in UT units to rotate. May be negative to rotate
			counter clockwise. This rotation is relatively added to bot current rotation, then the shortest turn to achieve this new rotation will be performed (so the maximum turn you can achive is to turn back by supporting value 32767 or -32767).
		 
         */
        public Rotate 
        setAmount(Integer Amount)
 	
			{
				this.Amount = Amount;
				return this;
			}
		
	        /**
	        
			If provided as "Vertical", rotation will be done to Pitch
			(up/down). Any other value, or not provided, and rotation
			will be to Yaw (left/right).
		 
	        */
	        protected
	         String Axis =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If provided as "Vertical", rotation will be done to Pitch
			(up/down). Any other value, or not provided, and rotation
			will be to Yaw (left/right).
		 
         */
        public String getAxis()
 	
	        {
	            return
	        	 Axis;
	        }
	        
	        
	        
 		
 		/**
         * 
			If provided as "Vertical", rotation will be done to Pitch
			(up/down). Any other value, or not provided, and rotation
			will be to Yaw (left/right).
		 
         */
        public Rotate 
        setAxis(String Axis)
 	
			{
				this.Axis = Axis;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Amount</b> = " +
            	String.valueOf(getAmount()
 	) +
            	" <br/> " +
            	
            	"<b>Axis</b> = " +
            	String.valueOf(getAxis()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("ROTATE");
     		
						if (Amount != null) {
							buf.append(" {Amount " + Amount + "}");
						}
					
						if (Axis != null) {
							buf.append(" {Axis " + Axis + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	