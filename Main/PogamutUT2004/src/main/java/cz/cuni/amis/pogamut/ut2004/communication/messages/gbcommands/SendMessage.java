
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command MESSAGE.
 		 *
 		 * 
		Send a message to the world or just your team.
	
         */
 	public class SendMessage 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Id unreal_id}  {Text text}  {TeamIndex 0}  {Global False}  {FadeOut 0} ";
    
		/**
		 * Creates new instance of command SendMessage.
		 * 
		Send a message to the world or just your team.
	
		 * Corresponding GameBots message for this command is
		 * MESSAGE.
		 *
		 * 
		 *    @param Id Here we can specify Id of the bot, that will receive this message privately (with "Private:" string at the beginning of the message). Doesn't work for players (but if text bubble enabled, players will see this message above the bot head).
		 *    @param Text Text to send.
		 *    @param TeamIndex 
			Specifying target team - can be 0 or 1. Works only in team games. If global is set to true then the message will be sent to all nevertheless.
		
		 *    @param Global 
			If True it is sent to everyone. Otherwise (or if not
			specified), just your team.
		
		 *    @param FadeOut Enables text bubble. Sets how long the bubble should stay (in seconds, counted ~ 12 + FadeOut seconds - dunno why, some UT mechanics?). If -1 the bubble won't be shown.
		 */
		public SendMessage(
			UnrealId Id,  String Text,  Integer TeamIndex,  Boolean Global,  Double FadeOut
		) {
			
				this.Id = Id;
            
				this.Text = Text;
            
				this.TeamIndex = TeamIndex;
            
				this.Global = Global;
            
				this.FadeOut = FadeOut;
            
		}

		
			/**
			 * Creates new instance of command SendMessage.
			 * 
		Send a message to the world or just your team.
	
			 * Corresponding GameBots message for this command is
			 * MESSAGE.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public SendMessage() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public SendMessage(SendMessage original) {
		   
		        this.Id = original.Id;
		   
		        this.Text = original.Text;
		   
		        this.TeamIndex = original.TeamIndex;
		   
		        this.Global = original.Global;
		   
		        this.FadeOut = original.FadeOut;
		   
		}
    
	        /**
	        Here we can specify Id of the bot, that will receive this message privately (with "Private:" string at the beginning of the message). Doesn't work for players (but if text bubble enabled, players will see this message above the bot head). 
	        */
	        protected
	         UnrealId Id =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Here we can specify Id of the bot, that will receive this message privately (with "Private:" string at the beginning of the message). Doesn't work for players (but if text bubble enabled, players will see this message above the bot head). 
         */
        public UnrealId getId()
 	
	        {
	            return
	        	 Id;
	        }
	        
	        
	        
 		
 		/**
         * Here we can specify Id of the bot, that will receive this message privately (with "Private:" string at the beginning of the message). Doesn't work for players (but if text bubble enabled, players will see this message above the bot head). 
         */
        public SendMessage 
        setId(UnrealId Id)
 	
			{
				this.Id = Id;
				return this;
			}
		
	        /**
	        Text to send. 
	        */
	        protected
	         String Text =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Text to send. 
         */
        public String getText()
 	
	        {
	            return
	        	 Text;
	        }
	        
	        
	        
 		
 		/**
         * Text to send. 
         */
        public SendMessage 
        setText(String Text)
 	
			{
				this.Text = Text;
				return this;
			}
		
	        /**
	        
			Specifying target team - can be 0 or 1. Works only in team games. If global is set to true then the message will be sent to all nevertheless.
		 
	        */
	        protected
	         Integer TeamIndex =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Specifying target team - can be 0 or 1. Works only in team games. If global is set to true then the message will be sent to all nevertheless.
		 
         */
        public Integer getTeamIndex()
 	
	        {
	            return
	        	 TeamIndex;
	        }
	        
	        
	        
 		
 		/**
         * 
			Specifying target team - can be 0 or 1. Works only in team games. If global is set to true then the message will be sent to all nevertheless.
		 
         */
        public SendMessage 
        setTeamIndex(Integer TeamIndex)
 	
			{
				this.TeamIndex = TeamIndex;
				return this;
			}
		
	        /**
	        
			If True it is sent to everyone. Otherwise (or if not
			specified), just your team.
		 
	        */
	        protected
	         Boolean Global =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If True it is sent to everyone. Otherwise (or if not
			specified), just your team.
		 
         */
        public Boolean isGlobal()
 	
	        {
	            return
	        	 Global;
	        }
	        
	        
	        
 		
 		/**
         * 
			If True it is sent to everyone. Otherwise (or if not
			specified), just your team.
		 
         */
        public SendMessage 
        setGlobal(Boolean Global)
 	
			{
				this.Global = Global;
				return this;
			}
		
	        /**
	        Enables text bubble. Sets how long the bubble should stay (in seconds, counted ~ 12 + FadeOut seconds - dunno why, some UT mechanics?). If -1 the bubble won't be shown. 
	        */
	        protected
	         Double FadeOut =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Enables text bubble. Sets how long the bubble should stay (in seconds, counted ~ 12 + FadeOut seconds - dunno why, some UT mechanics?). If -1 the bubble won't be shown. 
         */
        public Double getFadeOut()
 	
	        {
	            return
	        	 FadeOut;
	        }
	        
	        
	        
 		
 		/**
         * Enables text bubble. Sets how long the bubble should stay (in seconds, counted ~ 12 + FadeOut seconds - dunno why, some UT mechanics?). If -1 the bubble won't be shown. 
         */
        public SendMessage 
        setFadeOut(Double FadeOut)
 	
			{
				this.FadeOut = FadeOut;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Id</b> = " +
            	String.valueOf(getId()
 	) +
            	" <br/> " +
            	
            	"<b>Text</b> = " +
            	String.valueOf(getText()
 	) +
            	" <br/> " +
            	
            	"<b>TeamIndex</b> = " +
            	String.valueOf(getTeamIndex()
 	) +
            	" <br/> " +
            	
            	"<b>Global</b> = " +
            	String.valueOf(isGlobal()
 	) +
            	" <br/> " +
            	
            	"<b>FadeOut</b> = " +
            	String.valueOf(getFadeOut()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("MESSAGE");
     		
						if (Id != null) {
							buf.append(" {Id " + Id.getStringId() + "}");
						}
					
						if (Text != null) {
							buf.append(" {Text " + Text + "}");
						}
					
						if (TeamIndex != null) {
							buf.append(" {TeamIndex " + TeamIndex + "}");
						}
					
						if (Global != null) {
							buf.append(" {Global " + Global + "}");
						}
					
						if (FadeOut != null) {
							buf.append(" {FadeOut " + FadeOut + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	