
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command ADDRAY.
 		 *
 		 * 
		Add custom ray for automatic ray tracing. If you send Id =
		Default, all rays will be erased and default set of rays will be
		loaded (straight ahead (1,0,0) with 250 length, 45 degrees left
		(1,–1,0) with 200 length, 45 degrees right (1,1,0) with 200
		length). This set of rays is also loaded by default. If you want
		to change existing ray, just support its Id in ADDRAY command
		along with new parameters. Direction of the rays work as
		follows. Bot is looking to x axis, that means if I want ray
		straight ahead I specify some vector on positive x axis (vectors
		in unreal are specified by (x,y,z) so it would look like this
		(1,0,0) or this (123,0,0) – numbers doesn't matter, its about
		direction - vectors will be normalized). If I want ray behind it
		would be (–1,0,0). 90 degrees right (0,1,0) etc.
	
         */
 	public class AddRay 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Id text}  {Direction 0,0,0}  {Length 0}  {FastTrace False}  {FloorCorrection False}  {TraceActors False} ";
    
		/**
		 * Creates new instance of command AddRay.
		 * 
		Add custom ray for automatic ray tracing. If you send Id =
		Default, all rays will be erased and default set of rays will be
		loaded (straight ahead (1,0,0) with 250 length, 45 degrees left
		(1,–1,0) with 200 length, 45 degrees right (1,1,0) with 200
		length). This set of rays is also loaded by default. If you want
		to change existing ray, just support its Id in ADDRAY command
		along with new parameters. Direction of the rays work as
		follows. Bot is looking to x axis, that means if I want ray
		straight ahead I specify some vector on positive x axis (vectors
		in unreal are specified by (x,y,z) so it would look like this
		(1,0,0) or this (123,0,0) – numbers doesn't matter, its about
		direction - vectors will be normalized). If I want ray behind it
		would be (–1,0,0). 90 degrees right (0,1,0) etc.
	
		 * Corresponding GameBots message for this command is
		 * ADDRAY.
		 *
		 * 
		 *    @param Id 
			User set Id of the ray, so the ray can be identified.
		
		 *    @param Direction 
			Vector direction of the ray (it will be relative - added to
			the vector, where the bot is looking, also takes into
			account angle of the floor the bot is standing on).
		
		 *    @param Length 
			Specifies the length of the ray (in UT units).
		
		 *    @param FastTrace 
			True if we want to use FastTrace function instead of Trace
			function (a bit faster but less information provided - just
			information if we hit something or not).
		
		 *    @param FloorCorrection 
      If we should correct ray directions accoring floor normal. Note: Has issue - we can't set set rays up or down when correction is active.
		
		 *    @param TraceActors 
			If we want to trace also actors – bots, monsters, players,
			items. False if we want to trace just level geometry.
		
		 */
		public AddRay(
			String Id,  Vector3d Direction,  Integer Length,  Boolean FastTrace,  Boolean FloorCorrection,  Boolean TraceActors
		) {
			
				this.Id = Id;
            
				this.Direction = Direction;
            
				this.Length = Length;
            
				this.FastTrace = FastTrace;
            
				this.FloorCorrection = FloorCorrection;
            
				this.TraceActors = TraceActors;
            
		}

		
			/**
			 * Creates new instance of command AddRay.
			 * 
		Add custom ray for automatic ray tracing. If you send Id =
		Default, all rays will be erased and default set of rays will be
		loaded (straight ahead (1,0,0) with 250 length, 45 degrees left
		(1,–1,0) with 200 length, 45 degrees right (1,1,0) with 200
		length). This set of rays is also loaded by default. If you want
		to change existing ray, just support its Id in ADDRAY command
		along with new parameters. Direction of the rays work as
		follows. Bot is looking to x axis, that means if I want ray
		straight ahead I specify some vector on positive x axis (vectors
		in unreal are specified by (x,y,z) so it would look like this
		(1,0,0) or this (123,0,0) – numbers doesn't matter, its about
		direction - vectors will be normalized). If I want ray behind it
		would be (–1,0,0). 90 degrees right (0,1,0) etc.
	
			 * Corresponding GameBots message for this command is
			 * ADDRAY.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public AddRay() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public AddRay(AddRay original) {
		   
		        this.Id = original.Id;
		   
		        this.Direction = original.Direction;
		   
		        this.Length = original.Length;
		   
		        this.FastTrace = original.FastTrace;
		   
		        this.FloorCorrection = original.FloorCorrection;
		   
		        this.TraceActors = original.TraceActors;
		   
		}
    
	        /**
	        
			User set Id of the ray, so the ray can be identified.
		 
	        */
	        protected
	         String Id =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			User set Id of the ray, so the ray can be identified.
		 
         */
        public String getId()
 	
	        {
	            return
	        	 Id;
	        }
	        
	        
	        
 		
 		/**
         * 
			User set Id of the ray, so the ray can be identified.
		 
         */
        public AddRay 
        setId(String Id)
 	
			{
				this.Id = Id;
				return this;
			}
		
	        /**
	        
			Vector direction of the ray (it will be relative - added to
			the vector, where the bot is looking, also takes into
			account angle of the floor the bot is standing on).
		 
	        */
	        protected
	         Vector3d Direction =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Vector direction of the ray (it will be relative - added to
			the vector, where the bot is looking, also takes into
			account angle of the floor the bot is standing on).
		 
         */
        public Vector3d getDirection()
 	
	        {
	            return
	        	 Direction;
	        }
	        
	        
	        
 		
 		/**
         * 
			Vector direction of the ray (it will be relative - added to
			the vector, where the bot is looking, also takes into
			account angle of the floor the bot is standing on).
		 
         */
        public AddRay 
        setDirection(Vector3d Direction)
 	
			{
				this.Direction = Direction;
				return this;
			}
		
	        /**
	        
			Specifies the length of the ray (in UT units).
		 
	        */
	        protected
	         Integer Length =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Specifies the length of the ray (in UT units).
		 
         */
        public Integer getLength()
 	
	        {
	            return
	        	 Length;
	        }
	        
	        
	        
 		
 		/**
         * 
			Specifies the length of the ray (in UT units).
		 
         */
        public AddRay 
        setLength(Integer Length)
 	
			{
				this.Length = Length;
				return this;
			}
		
	        /**
	        
			True if we want to use FastTrace function instead of Trace
			function (a bit faster but less information provided - just
			information if we hit something or not).
		 
	        */
	        protected
	         Boolean FastTrace =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			True if we want to use FastTrace function instead of Trace
			function (a bit faster but less information provided - just
			information if we hit something or not).
		 
         */
        public Boolean isFastTrace()
 	
	        {
	            return
	        	 FastTrace;
	        }
	        
	        
	        
 		
 		/**
         * 
			True if we want to use FastTrace function instead of Trace
			function (a bit faster but less information provided - just
			information if we hit something or not).
		 
         */
        public AddRay 
        setFastTrace(Boolean FastTrace)
 	
			{
				this.FastTrace = FastTrace;
				return this;
			}
		
	        /**
	        
      If we should correct ray directions accoring floor normal. Note: Has issue - we can't set set rays up or down when correction is active.
		 
	        */
	        protected
	         Boolean FloorCorrection =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
      If we should correct ray directions accoring floor normal. Note: Has issue - we can't set set rays up or down when correction is active.
		 
         */
        public Boolean isFloorCorrection()
 	
	        {
	            return
	        	 FloorCorrection;
	        }
	        
	        
	        
 		
 		/**
         * 
      If we should correct ray directions accoring floor normal. Note: Has issue - we can't set set rays up or down when correction is active.
		 
         */
        public AddRay 
        setFloorCorrection(Boolean FloorCorrection)
 	
			{
				this.FloorCorrection = FloorCorrection;
				return this;
			}
		
	        /**
	        
			If we want to trace also actors – bots, monsters, players,
			items. False if we want to trace just level geometry.
		 
	        */
	        protected
	         Boolean TraceActors =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			If we want to trace also actors – bots, monsters, players,
			items. False if we want to trace just level geometry.
		 
         */
        public Boolean isTraceActors()
 	
	        {
	            return
	        	 TraceActors;
	        }
	        
	        
	        
 		
 		/**
         * 
			If we want to trace also actors – bots, monsters, players,
			items. False if we want to trace just level geometry.
		 
         */
        public AddRay 
        setTraceActors(Boolean TraceActors)
 	
			{
				this.TraceActors = TraceActors;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Id</b> = " +
            	String.valueOf(getId()
 	) +
            	" <br/> " +
            	
            	"<b>Direction</b> = " +
            	String.valueOf(getDirection()
 	) +
            	" <br/> " +
            	
            	"<b>Length</b> = " +
            	String.valueOf(getLength()
 	) +
            	" <br/> " +
            	
            	"<b>FastTrace</b> = " +
            	String.valueOf(isFastTrace()
 	) +
            	" <br/> " +
            	
            	"<b>FloorCorrection</b> = " +
            	String.valueOf(isFloorCorrection()
 	) +
            	" <br/> " +
            	
            	"<b>TraceActors</b> = " +
            	String.valueOf(isTraceActors()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("ADDRAY");
     		
						if (Id != null) {
							buf.append(" {Id " + Id + "}");
						}
					
						if (Direction != null) {
							buf.append(" {Direction " +
								Direction.getX() + "," +
								Direction.getY() + "," +
								Direction.getZ() + "}");
						}
					
						if (Length != null) {
							buf.append(" {Length " + Length + "}");
						}
					
						if (FastTrace != null) {
							buf.append(" {FastTrace " + FastTrace + "}");
						}
					
						if (FloorCorrection != null) {
							buf.append(" {FloorCorrection " + FloorCorrection + "}");
						}
					
						if (TraceActors != null) {
							buf.append(" {TraceActors " + TraceActors + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	