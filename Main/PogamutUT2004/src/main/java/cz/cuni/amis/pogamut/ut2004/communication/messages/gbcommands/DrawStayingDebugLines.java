
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command DRAWLINES.
 		 *
 		 * 
	Draws colored staying debug lines in UT2004. Note that these lines may be erased by ALT + G command as well! Drawing works as follows: Two vectors from attribute Vectors are read and line with the specified color is drawn between them, then again two another vectors are read, etc. If there are not enough vectors in the list, line won't be drawn. Color is in RGB format - 0 to 255. ClearAll set to true clears all staying debug lines before drawing (new lines still be drawn if supplied).
	
         */
 	public class DrawStayingDebugLines 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Vectors text}  {Color 0,0,0}  {ClearAll False} ";
    
		/**
		 * Creates new instance of command DrawStayingDebugLines.
		 * 
	Draws colored staying debug lines in UT2004. Note that these lines may be erased by ALT + G command as well! Drawing works as follows: Two vectors from attribute Vectors are read and line with the specified color is drawn between them, then again two another vectors are read, etc. If there are not enough vectors in the list, line won't be drawn. Color is in RGB format - 0 to 255. ClearAll set to true clears all staying debug lines before drawing (new lines still be drawn if supplied).
	
		 * Corresponding GameBots message for this command is
		 * DRAWLINES.
		 *
		 * 
		 *    @param Vectors Attribute holding the vectors for line drawing. Vectors of line points are sent as string. Vectors delimiter is ";" (without quotes), vector X,Y,Z delimiter is "," (without quotes). Example: {Vectors 1000,1000,0;2500,1000,0;3000,1000,0;4000,1000,0}. 
		 *    @param Color Color in RGB format sent as vector. Ranges from 0 to 255. Default is white.
		 *    @param ClearAll If set to true all previous staying debug lines will be erased prior to drawing.
		 */
		public DrawStayingDebugLines(
			String Vectors,  Location Color,  Boolean ClearAll
		) {
			
				this.Vectors = Vectors;
            
				this.Color = Color;
            
				this.ClearAll = ClearAll;
            
		}

		
			/**
			 * Creates new instance of command DrawStayingDebugLines.
			 * 
	Draws colored staying debug lines in UT2004. Note that these lines may be erased by ALT + G command as well! Drawing works as follows: Two vectors from attribute Vectors are read and line with the specified color is drawn between them, then again two another vectors are read, etc. If there are not enough vectors in the list, line won't be drawn. Color is in RGB format - 0 to 255. ClearAll set to true clears all staying debug lines before drawing (new lines still be drawn if supplied).
	
			 * Corresponding GameBots message for this command is
			 * DRAWLINES.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public DrawStayingDebugLines() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public DrawStayingDebugLines(DrawStayingDebugLines original) {
		   
		        this.Vectors = original.Vectors;
		   
		        this.Color = original.Color;
		   
		        this.ClearAll = original.ClearAll;
		   
		}
    
	        /**
	        Attribute holding the vectors for line drawing. Vectors of line points are sent as string. Vectors delimiter is ";" (without quotes), vector X,Y,Z delimiter is "," (without quotes). Example: {Vectors 1000,1000,0;2500,1000,0;3000,1000,0;4000,1000,0}.  
	        */
	        protected
	         String Vectors =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Attribute holding the vectors for line drawing. Vectors of line points are sent as string. Vectors delimiter is ";" (without quotes), vector X,Y,Z delimiter is "," (without quotes). Example: {Vectors 1000,1000,0;2500,1000,0;3000,1000,0;4000,1000,0}.  
         */
        public String getVectors()
 	
	        {
	            return
	        	 Vectors;
	        }
	        
	        
	        
 		
 		/**
         * Attribute holding the vectors for line drawing. Vectors of line points are sent as string. Vectors delimiter is ";" (without quotes), vector X,Y,Z delimiter is "," (without quotes). Example: {Vectors 1000,1000,0;2500,1000,0;3000,1000,0;4000,1000,0}.  
         */
        public DrawStayingDebugLines 
        setVectors(String Vectors)
 	
			{
				this.Vectors = Vectors;
				return this;
			}
		
	        /**
	        Color in RGB format sent as vector. Ranges from 0 to 255. Default is white. 
	        */
	        protected
	         Location Color =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Color in RGB format sent as vector. Ranges from 0 to 255. Default is white. 
         */
        public Location getColor()
 	
	        {
	            return
	        	 Color;
	        }
	        
	        
	        
 		
 		/**
         * Color in RGB format sent as vector. Ranges from 0 to 255. Default is white. 
         */
        public DrawStayingDebugLines 
        setColor(Location Color)
 	
			{
				this.Color = Color;
				return this;
			}
		
	        /**
	        If set to true all previous staying debug lines will be erased prior to drawing. 
	        */
	        protected
	         Boolean ClearAll =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * If set to true all previous staying debug lines will be erased prior to drawing. 
         */
        public Boolean isClearAll()
 	
	        {
	            return
	        	 ClearAll;
	        }
	        
	        
	        
 		
 		/**
         * If set to true all previous staying debug lines will be erased prior to drawing. 
         */
        public DrawStayingDebugLines 
        setClearAll(Boolean ClearAll)
 	
			{
				this.ClearAll = ClearAll;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Vectors</b> = " +
            	String.valueOf(getVectors()
 	) +
            	" <br/> " +
            	
            	"<b>Color</b> = " +
            	String.valueOf(getColor()
 	) +
            	" <br/> " +
            	
            	"<b>ClearAll</b> = " +
            	String.valueOf(isClearAll()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("DRAWLINES");
     		
						if (Vectors != null) {
							buf.append(" {Vectors " + Vectors + "}");
						}
					
					    if (Color != null) {
					        buf.append(" {Color " +
					            Color.getX() + "," +
					            Color.getY() + "," +
					            Color.getZ() + "}");
					    }
					
						if (ClearAll != null) {
							buf.append(" {ClearAll " + ClearAll + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	