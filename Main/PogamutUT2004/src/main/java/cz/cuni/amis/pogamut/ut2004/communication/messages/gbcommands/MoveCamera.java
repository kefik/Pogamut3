
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command FORCECAMMOVE.
 		 *
 		 * 
		Moves with the player that was previously set as a camera.
	
         */
 	public class MoveCamera 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Id unreal_id}  {Destination 0,0,0}  {Direction 0,0,0}  {Rotation 0,0,0}  {RotationSpeed 0,0,0}  {Speed 0}  {Time 0} ";
    
		/**
		 * Creates new instance of command MoveCamera.
		 * 
		Moves with the player that was previously set as a camera.
	
		 * Corresponding GameBots message for this command is
		 * FORCECAMMOVE.
		 *
		 * 
		 *    @param Id UnrealId of the player that is a camera and that we want to move. 
		 *    @param Destination Final destination where the camera should move. 
		 *    @param Direction Vector that sets direction of the move of this camera. 
		 *    @param Rotation Desired rotation. 
		 *    @param RotationSpeed Desired rotation speed. 
		 *    @param Speed Set the speed of the move of this camera. 
		 *    @param Time How long this move of this camera will last (in seconds). 
		 */
		public MoveCamera(
			UnrealId Id,  Location Destination,  Vector3d Direction,  Rotation Rotation,  Rotation RotationSpeed,  Double Speed,  Double Time
		) {
			
				this.Id = Id;
            
				this.Destination = Destination;
            
				this.Direction = Direction;
            
				this.Rotation = Rotation;
            
				this.RotationSpeed = RotationSpeed;
            
				this.Speed = Speed;
            
				this.Time = Time;
            
		}

		
			/**
			 * Creates new instance of command MoveCamera.
			 * 
		Moves with the player that was previously set as a camera.
	
			 * Corresponding GameBots message for this command is
			 * FORCECAMMOVE.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public MoveCamera() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public MoveCamera(MoveCamera original) {
		   
		        this.Id = original.Id;
		   
		        this.Destination = original.Destination;
		   
		        this.Direction = original.Direction;
		   
		        this.Rotation = original.Rotation;
		   
		        this.RotationSpeed = original.RotationSpeed;
		   
		        this.Speed = original.Speed;
		   
		        this.Time = original.Time;
		   
		}
    
	        /**
	        UnrealId of the player that is a camera and that we want to move.  
	        */
	        protected
	         UnrealId Id =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * UnrealId of the player that is a camera and that we want to move.  
         */
        public UnrealId getId()
 	
	        {
	            return
	        	 Id;
	        }
	        
	        
	        
 		
 		/**
         * UnrealId of the player that is a camera and that we want to move.  
         */
        public MoveCamera 
        setId(UnrealId Id)
 	
			{
				this.Id = Id;
				return this;
			}
		
	        /**
	        Final destination where the camera should move.  
	        */
	        protected
	         Location Destination =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Final destination where the camera should move.  
         */
        public Location getDestination()
 	
	        {
	            return
	        	 Destination;
	        }
	        
	        
	        
 		
 		/**
         * Final destination where the camera should move.  
         */
        public MoveCamera 
        setDestination(Location Destination)
 	
			{
				this.Destination = Destination;
				return this;
			}
		
	        /**
	        Vector that sets direction of the move of this camera.  
	        */
	        protected
	         Vector3d Direction =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Vector that sets direction of the move of this camera.  
         */
        public Vector3d getDirection()
 	
	        {
	            return
	        	 Direction;
	        }
	        
	        
	        
 		
 		/**
         * Vector that sets direction of the move of this camera.  
         */
        public MoveCamera 
        setDirection(Vector3d Direction)
 	
			{
				this.Direction = Direction;
				return this;
			}
		
	        /**
	        Desired rotation.  
	        */
	        protected
	         Rotation Rotation =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Desired rotation.  
         */
        public Rotation getRotation()
 	
	        {
	            return
	        	 Rotation;
	        }
	        
	        
	        
 		
 		/**
         * Desired rotation.  
         */
        public MoveCamera 
        setRotation(Rotation Rotation)
 	
			{
				this.Rotation = Rotation;
				return this;
			}
		
	        /**
	        Desired rotation speed.  
	        */
	        protected
	         Rotation RotationSpeed =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Desired rotation speed.  
         */
        public Rotation getRotationSpeed()
 	
	        {
	            return
	        	 RotationSpeed;
	        }
	        
	        
	        
 		
 		/**
         * Desired rotation speed.  
         */
        public MoveCamera 
        setRotationSpeed(Rotation RotationSpeed)
 	
			{
				this.RotationSpeed = RotationSpeed;
				return this;
			}
		
	        /**
	        Set the speed of the move of this camera.  
	        */
	        protected
	         Double Speed =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Set the speed of the move of this camera.  
         */
        public Double getSpeed()
 	
	        {
	            return
	        	 Speed;
	        }
	        
	        
	        
 		
 		/**
         * Set the speed of the move of this camera.  
         */
        public MoveCamera 
        setSpeed(Double Speed)
 	
			{
				this.Speed = Speed;
				return this;
			}
		
	        /**
	        How long this move of this camera will last (in seconds).  
	        */
	        protected
	         Double Time =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * How long this move of this camera will last (in seconds).  
         */
        public Double getTime()
 	
	        {
	            return
	        	 Time;
	        }
	        
	        
	        
 		
 		/**
         * How long this move of this camera will last (in seconds).  
         */
        public MoveCamera 
        setTime(Double Time)
 	
			{
				this.Time = Time;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Id</b> = " +
            	String.valueOf(getId()
 	) +
            	" <br/> " +
            	
            	"<b>Destination</b> = " +
            	String.valueOf(getDestination()
 	) +
            	" <br/> " +
            	
            	"<b>Direction</b> = " +
            	String.valueOf(getDirection()
 	) +
            	" <br/> " +
            	
            	"<b>Rotation</b> = " +
            	String.valueOf(getRotation()
 	) +
            	" <br/> " +
            	
            	"<b>RotationSpeed</b> = " +
            	String.valueOf(getRotationSpeed()
 	) +
            	" <br/> " +
            	
            	"<b>Speed</b> = " +
            	String.valueOf(getSpeed()
 	) +
            	" <br/> " +
            	
            	"<b>Time</b> = " +
            	String.valueOf(getTime()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("FORCECAMMOVE");
     		
						if (Id != null) {
							buf.append(" {Id " + Id.getStringId() + "}");
						}
					
					    if (Destination != null) {
					        buf.append(" {Destination " +
					            Destination.getX() + "," +
					            Destination.getY() + "," +
					            Destination.getZ() + "}");
					    }
					
						if (Direction != null) {
							buf.append(" {Direction " +
								Direction.getX() + "," +
								Direction.getY() + "," +
								Direction.getZ() + "}");
						}
					
					    if (Rotation != null) {
					        buf.append(" {Rotation " +
					            Rotation.getPitch() + "," +
					            Rotation.getYaw() + "," +
					            Rotation.getRoll() + "}");
					    }
					
					    if (RotationSpeed != null) {
					        buf.append(" {RotationSpeed " +
					            RotationSpeed.getPitch() + "," +
					            RotationSpeed.getYaw() + "," +
					            RotationSpeed.getRoll() + "}");
					    }
					
						if (Speed != null) {
							buf.append(" {Speed " + Speed + "}");
						}
					
						if (Time != null) {
							buf.append(" {Time " + Time + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	