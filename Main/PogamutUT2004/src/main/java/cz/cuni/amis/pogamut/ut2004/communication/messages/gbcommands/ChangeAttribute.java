
	 	/**
         IMPORTANT !!!

         DO NOT EDIT THIS FILE. IT IS GENERATED FROM approriate xml file in xmlresources/gbcommands BY
         THE JavaClassesGenerator.xslt. MODIFY THAT FILE INSTEAD OF THIS ONE.
         
         Use Ant task process-gb-messages after that to generate .java files again.
         
         IMPORTANT END !!!
        */
 	package cz.cuni.amis.pogamut.ut2004.communication.messages.gbcommands;import java.util.*;import javax.vecmath.*;import cz.cuni.amis.pogamut.base.communication.messages.*;import cz.cuni.amis.pogamut.base.communication.worldview.*;import cz.cuni.amis.pogamut.base.communication.worldview.event.*;import cz.cuni.amis.pogamut.base.communication.worldview.object.*;import cz.cuni.amis.pogamut.multi.communication.worldview.object.*;import cz.cuni.amis.pogamut.base.communication.translator.event.*;import cz.cuni.amis.pogamut.multi.communication.translator.event.*;import cz.cuni.amis.pogamut.base3d.worldview.object.*;import cz.cuni.amis.pogamut.base3d.worldview.object.event.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.*;import cz.cuni.amis.pogamut.ut2004.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.objects.*;import cz.cuni.amis.pogamut.ut2004.communication.translator.itemdescriptor.*;import cz.cuni.amis.pogamut.ut2004.communication.messages.ItemType.Category;import cz.cuni.amis.pogamut.unreal.communication.messages.UnrealId;import cz.cuni.amis.utils.exception.*;import cz.cuni.amis.pogamut.base.communication.translator.event.IWorldObjectUpdateResult.Result;import cz.cuni.amis.utils.SafeEquals;import cz.cuni.amis.pogamut.base.agent.*;import cz.cuni.amis.pogamut.multi.agent.*;import cz.cuni.amis.pogamut.multi.communication.worldview.property.*;import cz.cuni.amis.pogamut.ut2004multi.communication.worldview.property.*;import cz.cuni.amis.utils.token.*;import cz.cuni.amis.utils.*;
 		/**
 		 * Representation of the GameBots2004 command CHATTR.
 		 *
 		 * 
		Will change the specified attribute of the bot. This command can
		be issued also by bot on the bot itself (in this case Id
		attribute is not parsed). Issuing by bot is allowed just when
		the game has allowed cheating (bAllowCheats = True in GameBots2004.ini
		file).
	
         */
 	public class ChangeAttribute 
		extends CommandMessage
	        {
	        	
		        
    	/** Example how the message looks like - used during parser tests. */
    	public static final String PROTOTYPE =
    		" {Id unreal_id}  {Health 0}  {Adrenaline 0} ";
    
		/**
		 * Creates new instance of command ChangeAttribute.
		 * 
		Will change the specified attribute of the bot. This command can
		be issued also by bot on the bot itself (in this case Id
		attribute is not parsed). Issuing by bot is allowed just when
		the game has allowed cheating (bAllowCheats = True in GameBots2004.ini
		file).
	
		 * Corresponding GameBots message for this command is
		 * CHATTR.
		 *
		 * 
		 *    @param Id 
			Id of the target bot. Not used if sent as a command for the
			bot.
		
		 *    @param Health Sets the bot health. Maximum health level is 199 in UT2004. 
		 *    @param Adrenaline Sets the bot adrenaline. From 0 to 100.
		 */
		public ChangeAttribute(
			UnrealId Id,  Integer Health,  Integer Adrenaline
		) {
			
				this.Id = Id;
            
				this.Health = Health;
            
				this.Adrenaline = Adrenaline;
            
		}

		
			/**
			 * Creates new instance of command ChangeAttribute.
			 * 
		Will change the specified attribute of the bot. This command can
		be issued also by bot on the bot itself (in this case Id
		attribute is not parsed). Issuing by bot is allowed just when
		the game has allowed cheating (bAllowCheats = True in GameBots2004.ini
		file).
	
			 * Corresponding GameBots message for this command is
			 * CHATTR.
			 * <p></p>
			 * WARNING: this is empty-command constructor, you have to use setters to fill it up with data that should be sent to GameBots2004!
		     */
		    public ChangeAttribute() {
		    }
			
		
		/**
		 * Cloning constructor.
		 *
		 * @param original
		 */
		public ChangeAttribute(ChangeAttribute original) {
		   
		        this.Id = original.Id;
		   
		        this.Health = original.Health;
		   
		        this.Adrenaline = original.Adrenaline;
		   
		}
    
	        /**
	        
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
	        */
	        protected
	         UnrealId Id =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * 
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
         */
        public UnrealId getId()
 	
	        {
	            return
	        	 Id;
	        }
	        
	        
	        
 		
 		/**
         * 
			Id of the target bot. Not used if sent as a command for the
			bot.
		 
         */
        public ChangeAttribute 
        setId(UnrealId Id)
 	
			{
				this.Id = Id;
				return this;
			}
		
	        /**
	        Sets the bot health. Maximum health level is 199 in UT2004.  
	        */
	        protected
	         Integer Health =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Sets the bot health. Maximum health level is 199 in UT2004.  
         */
        public Integer getHealth()
 	
	        {
	            return
	        	 Health;
	        }
	        
	        
	        
 		
 		/**
         * Sets the bot health. Maximum health level is 199 in UT2004.  
         */
        public ChangeAttribute 
        setHealth(Integer Health)
 	
			{
				this.Health = Health;
				return this;
			}
		
	        /**
	        Sets the bot adrenaline. From 0 to 100. 
	        */
	        protected
	         Integer Adrenaline =
	       	
	        		null
	        	;
	
	        
	        
 		/**
         * Sets the bot adrenaline. From 0 to 100. 
         */
        public Integer getAdrenaline()
 	
	        {
	            return
	        	 Adrenaline;
	        }
	        
	        
	        
 		
 		/**
         * Sets the bot adrenaline. From 0 to 100. 
         */
        public ChangeAttribute 
        setAdrenaline(Integer Adrenaline)
 	
			{
				this.Adrenaline = Adrenaline;
				return this;
			}
		
 	    public String toString() {
            return toMessage();
        }
 	
 		public String toHtmlString() {
			return super.toString() + "[<br/>" +
            	
            	"<b>Id</b> = " +
            	String.valueOf(getId()
 	) +
            	" <br/> " +
            	
            	"<b>Health</b> = " +
            	String.valueOf(getHealth()
 	) +
            	" <br/> " +
            	
            	"<b>Adrenaline</b> = " +
            	String.valueOf(getAdrenaline()
 	) +
            	" <br/> " +
            	 
            	"<br/>]"
            ;
		}
 	
		public String toMessage() {
     		StringBuffer buf = new StringBuffer();
     		buf.append("CHATTR");
     		
						if (Id != null) {
							buf.append(" {Id " + Id.getStringId() + "}");
						}
					
						if (Health != null) {
							buf.append(" {Health " + Health + "}");
						}
					
						if (Adrenaline != null) {
							buf.append(" {Adrenaline " + Adrenaline + "}");
						}
					
   			return buf.toString();
   		}
 	
 		// --- Extra Java from XML BEGIN (extra/code/java)
        	
		// --- Extra Java from XML END (extra/code/java)
 	
	        }
    	